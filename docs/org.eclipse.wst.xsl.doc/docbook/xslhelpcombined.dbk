<?xml version="1.0" encoding="UTF-8"?><book xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="XSLUser" xsi:noNamespaceSchemaLocation="http://www.docbook.org/xsd/4.5/docbook.xsd">
  <bookinfo>
      <title>XSL Tooling User Documentation</title>
      <author>
         <firstname>David</firstname>
         <surname>Carver</surname>
      </author>
      <copyright>
         <year>2008</year>
         <holder>Eclipse Foundation and others</holder>
      </copyright>
   </bookinfo>
   <chapter xml:base="editor/editor.xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.docbook.org/xsd/4.5/docbook.xsd">
	<?dbhtml filename="editor/xsleditor.html" ?>
	<title>XSL Editing</title>
	<para>
      The XSL Tooling plugins extend the ability of the Web Standard Tools XML
      editor.  This extension adds specific support and functionality for working
      with and debugging XSL files. 
    </para>
    <section>
    	<?dbhtml filename="editor/xsleditor_validation.html" ?>
    	<title>Validation</title>
    	<para>
    		The XSL extensions for the eclipse XML editor include as you type validation for XSL specific features.  This includes not
    		only the ability to syntax check the grammar, but to also to validate specific XSL specification rules.  Grammar validation will
    		be triggered based on the version attribute for the style sheet that is being edited.   Valid version numbers are 1.0, and 2.0.
    		Currently XSLT 1.1 which was a transitional specification is not supported for editing.
    	</para>
    </section>
	<section>
		<?dbhtml filename="editor/xsleditor_validation.html" ?>
		<title>Content Assist</title>
		<para>
		    XSL Tooling extends the existing content assistance support of the XML
		    Editor to provide content assistance for several XSL namespace attributes.
		    The content assistance provided covers the available XPath statements as
		    defined in the <emphasis>XPath Templates</emphasis> preference page.
		</para>
		<para>
			The elements and attributes that have content assist available are as follows:
		</para>
		<itemizedlist>
			<listitem>
				<para>
				    <emphasis role="bold">template</emphasis> - The template element has several content assist
				    options available for the <emphasis>match</emphasis>, <emphasis>name</emphasis>, and 
				    <emphasis>mode</emphasis> attributes.
				</para>
				<para>
					Add image showing template completion.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">variable</emphasis> and <emphasis role="bold">param</emphasis> - The variable and param elements have content assist
					for xpath, axis, parmaters and variables that have already been predefined when using the optional
					<emphasis>select</emphasis> attribute.
				</para>
				<para>
					Add image showing variable completion.
				</para>
				
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">if</emphasis> and <emphasis role="bold">when</emphasis> - The
					if and when elements have content assist for the <emphasis>test</emphasis> attribute.
					This content assistance is available for all paramaters and variables that are in
					scope, as well as any available xpath or axis statement.
				</para>
				<para>
					Add image showing test completion.
				</para>
			</listitem>
			<listitem>
			    <para>
			    	<emphasis role="bold">apply-template</emphasis> - The apply template has content
			    	assistance for both the <emphasis>mode</emphasis> and <emphasis>select</emphasis>
			    	attributes. 
			    </para>
				<para>
					Add image showing apply-template completion.
				</para>
			</listitem>
		</itemizedlist>
		<important>
			<title>XPath 2.0 Support</title>
			<para>
				Currently XPath 2.0 is not supported directly.  However, a user can add this support if they need it by
				adding the missing XPath functions to the XPath Templates.
			</para>
		</important>
	</section>
	<section>
		<?dbhtml filename="editor/xsleditor_templates.html" ?>
		<title>Templates</title>
		<para>
			Specific XSL code completion templates can be added to the XML editor's Templates.   This allows a user
			to define specific markup completion templates that are commonly used.   In addition, the XPath Templates page
			can be enhanced to allow commonly used XPath templates to be included, in addition to those installed by default.
			This allows a user the ability to add custom extension functions for XSLT that may be processor specific.  Adopters
			may also use the standard template extension point to add additional functionality.
		</para>
		<section>
			<?dbhtml filename="editor/xsleditor_xpathtemplates.html" ?>
			<title>XPath Templates</title>
			<para>
				The XSL XPath Templates preference page allows for a user or adopter to add specific xpath extensions so that
				they show up in the content assistance.   See the XPath Templates documentation for more information.
			</para>
		</section>
	</section>
</chapter>
   <chapter xml:base="launching/launching.xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../docbook.xsd">
   
</chapter>
   <chapter id="XSLPreferences" xml:base="preferences/preferences.xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.docbook.org/xsd/4.5/docbook.xsd">
	<?dbhtml filename="preferences/xslpreferences.html" ?>
	<title>XSL Tooling Preferences</title>
	<para>
		The XSL Preference pages has several sub sections.  Each of these allow for configuration
		of various aspects of the preferences.   From the controlling of the default XSL processor
		to be used during transformations.   To extending the content assist support of the XPath
		functions available in the XML editor.
   </para>
	<mediaobject>
		<imageobject>
			<imagedata align="center" fileref="../images/preferences/xslpreferences.png" format="PNG"/>
		</imageobject>
	</mediaobject>
	<section id="XSLFeatures">
		<?dbhtml filename="preferences/xslfeatures.html" ?>
		<title>Features</title>
		<para>
   			The XSL Features preference page allows for the configuration of features for a particular
   			processor.   XSL Tooling comes with Xalan 2.7.0 by default.  Adopters can extend and include
   			their own specific features for their own procesoors.   An adopter could extend the tooling
   			to support XSLT 2.0 transformations, and features particular to that parser.
   		</para>
		<mediaobject>
			<imageobject>
				<imagedata align="center" fileref="../images/preferences/xslfeatures.png" format="PNG"/>
			</imageobject>
		</mediaobject>
		<para>
   			The <emphasis role="bold">Processor Type</emphasis> allows you to set features for a specific processor.  In this case
   			this is for the processor that is being installed.   XSL Tooling comes with Xalan 2.7.0, and it is the only available
   			processor type by default.
   		</para>
		<para>
   		    The feature table lists the features that are specific to the processor that was selected.  As you
   		    select each of the features, information regarding that feature and it's abilitis is displayed in the
   		    description box.   By clicking in the value column, next to the feature you want to set the value
   		    for, the user can set the feature.
   		</para>
	</section>
	<section id="XSLProcessors">
		<?dbhtml filename="preferences/xslprocessors.html" ?>
		<title>Installed Processors</title>
		<para>
  			The installed processors page lets you pick which of the installed XSLT processors will be used
  			by default.   The default is the System Default Procesoor, but you can select any of the
  			available processors to be used as the default processor.    	
      	</para>
      	<mediaobject>
      	   <imageobject>
      	   		<imagedata align="center" fileref="../images/preferences/xsl_InstalledProcessors.png" format="PNG"/>
      	   </imageobject>
      	</mediaobject>
	</section>
	<section id="XSLOutputProperties">
		<?dbhtml filename="preferences/xsloutputproperties.html" ?>
		<title>Output Properties</title>
		<para>
			The various xsl processors support a wide variety of processor specific tweaks.  However there
			are several Standard processor features that all XSLT processors support.   These options can be
			set and will act as the defaults for all transformations unless they are specifically overriden by
			the stylesheet or the launch configuration.
		</para>
		<mediaobject>
		    <imageobject>
		    	<imagedata align="center" fileref="../images/preferences/xsl_outputproperties.png" format="PNG"/>
		    </imageobject>
		</mediaobject>
		<para>
			In addition to the Standard Output Properties, each XSLT processor can have processors
			specific features.
		</para>
	</section>
</chapter>
</book>