/*
* Copyright (c) 2002 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Common Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/cpl-v10.html
* 
* Contributors:
*   IBM - Initial API and implementation
*   Jens Lukowski/Innoopract - initial renaming/restructuring
* 
*/
/* The following code was generated by JFlex 1.2.2 on 4/6/04 11:13 PM */
package org.eclipse.wst.xml.core.internal.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.wst.sse.core.parser.BlockMarker;
import org.eclipse.wst.sse.core.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.text.ITextRegion;
import org.eclipse.wst.sse.core.util.Debug;
import org.eclipse.wst.sse.core.util.StringUtils;
import org.eclipse.wst.xml.core.Logger;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.parser.XMLRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 5/19/04 4:59 PM from the specification file
 */
public class XMLTokenizer implements BlockTokenizer, XMLRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_XML_DECLARATION_OPEN = 1;
  final public static int ST_XML_COMMENT_END = 5;
  final public static int ST_XML_DECLARATION_TAG_NAME = 1;
  final public static int ST_XML_TAG_OPEN = 1;
  final public static int ST_BLOCK_TAG_SCAN = 29;
  final public static int ST_XML_DECLARATION_ATTRIBUTE_NAME = 1;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 10;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 12;
  final public static int ST_XML_ATTRIBUTE_VALUE = 17;
  final public static int ST_XML_ATTRIBUTE_NAME = 15;
  final public static int ST_XML_END_TAG_OPEN = 1;
  final public static int ST_XML_EQUALS = 16;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_ENTITY_DECLARATION = 28;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 23;
  final public static int ST_XML_ELEMENT_DECLARATION = 24;
  final public static int ST_XML_DECLARATION_CLOSE = 19;
  final public static int ST_XML_TAG_CLOSE = 1;
  final public static int ST_XML_DOCTYPE_DECLARATION = 20;
  final public static int ST_CDATA_END = 3;
  final public static int ST_PI_WS = 7;
  final public static int ST_CDATA_TEXT = 2;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 25;
  final public static int ST_XML_ATTLIST_DECLARATION = 26;
  final public static int ST_XML_PI_EQUALS = 11;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 27;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 22;
  final public static int ST_XML = 1;
  final public static int ST_ABORT_EMBEDDED = 1;
  final public static int ST_XML_DECLARATION_ATTRIBUTE_VALUE = 1;
  final public static int ST_XML_DECLARATION_EQUALS = 1;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 21;
  final public static int ST_PI_CONTENT = 8;
  final public static int ST_XML_PI_TAG_NAME = 9;
  final public static int ST_PI = 6;
  final public static int ST_XML_DECLARATION = 18;
  final public static int ST_XML_TAG_NAME = 14;
  final public static int ST_XML_PI_TAG_CLOSE = 13;
  final public static int ST_XML_COMMENT = 4;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\22\2\0\1\14\22\0\1\14\1\21\1\11\1\50"+
    "\1\16\1\17\1\12\1\13\1\16\1\16\1\16\1\16\1\16\1\7"+
    "\1\6\1\3\12\15\1\10\1\53\1\1\1\42\1\2\1\4\1\16"+
    "\1\32\1\54\1\30\1\31\1\35\1\51\1\34\1\34\1\37\1\34"+
    "\1\34\1\26\1\25\1\41\1\40\1\44\1\34\1\34\1\36\1\33"+
    "\1\52\2\34\1\23\1\43\1\34\1\27\1\0\1\20\1\0\1\10"+
    "\1\0\1\46\1\54\1\55\1\47\1\35\1\51\1\34\1\34\1\37"+
    "\2\34\1\26\1\25\1\41\1\40\1\44\1\34\1\34\1\36\1\45"+
    "\1\52\1\34\1\34\1\24\1\43\1\34\1\0\1\0\72\0\1\57"+
    "\10\0\27\56\1\0\37\56\1\0\72\56\2\0\13\56\2\0\10\56"+
    "\1\0\65\56\1\0\104\56\11\0\44\56\3\0\2\56\4\0\36\56"+
    "\70\0\131\56\22\0\7\56\16\0\2\57\56\0\106\57\32\0\2\57"+
    "\44\0\1\56\1\57\3\56\1\0\1\56\1\0\24\56\1\0\54\56"+
    "\1\0\7\56\3\0\1\56\1\0\1\56\1\0\1\56\1\0\1\56"+
    "\1\0\22\56\15\0\14\56\1\0\102\56\1\0\14\56\1\0\44\56"+
    "\1\0\4\57\11\0\65\56\2\0\2\56\2\0\2\56\3\0\34\56"+
    "\2\0\10\56\2\0\2\56\67\0\46\56\2\0\1\56\7\0\46\56"+
    "\12\0\21\57\1\0\27\57\1\0\3\57\1\0\1\57\1\0\2\57"+
    "\1\0\1\57\13\0\33\56\5\0\3\56\56\0\32\56\5\0\1\57"+
    "\12\56\10\57\15\0\12\57\6\0\1\57\107\56\2\0\5\56\1\0"+
    "\17\56\1\0\4\56\1\0\1\56\17\57\2\56\2\57\1\0\4\57"+
    "\2\0\12\57\u0207\0\3\57\1\0\65\56\2\0\1\57\1\56\20\57"+
    "\3\0\4\57\3\0\12\56\2\57\2\0\12\57\21\0\3\57\1\0"+
    "\10\56\2\0\2\56\2\0\26\56\1\0\7\56\1\0\1\56\3\0"+
    "\4\56\2\0\1\57\1\0\7\57\2\0\2\57\2\0\3\57\11\0"+
    "\1\57\4\0\2\56\1\0\3\56\2\57\2\0\12\57\2\56\20\0"+
    "\1\57\2\0\6\56\4\0\2\56\2\0\26\56\1\0\7\56\1\0"+
    "\2\56\1\0\2\56\1\0\2\56\2\0\1\57\1\0\5\57\4\0"+
    "\2\57\2\0\3\57\13\0\4\56\1\0\1\56\7\0\12\57\2\57"+
    "\3\56\14\0\3\57\1\0\7\56\1\0\1\56\1\0\3\56\1\0"+
    "\26\56\1\0\7\56\1\0\2\56\1\0\5\56\2\0\1\57\1\56"+
    "\10\57\1\0\3\57\1\0\3\57\22\0\1\56\5\0\12\57\21\0"+
    "\3\57\1\0\10\56\2\0\2\56\2\0\26\56\1\0\7\56\1\0"+
    "\2\56\2\0\4\56\2\0\1\57\1\56\6\57\3\0\2\57\2\0"+
    "\3\57\10\0\2\57\4\0\2\56\1\0\3\56\4\0\12\57\22\0"+
    "\2\57\1\0\6\56\3\0\3\56\1\0\4\56\3\0\2\56\1\0"+
    "\1\56\1\0\2\56\3\0\2\56\3\0\3\56\3\0\10\56\1\0"+
    "\3\56\4\0\5\57\3\0\3\57\1\0\4\57\11\0\1\57\17\0"+
    "\11\57\21\0\3\57\1\0\10\56\1\0\3\56\1\0\27\56\1\0"+
    "\12\56\1\0\5\56\4\0\7\57\1\0\3\57\1\0\4\57\7\0"+
    "\2\57\11\0\2\56\4\0\12\57\22\0\2\57\1\0\10\56\1\0"+
    "\3\56\1\0\27\56\1\0\12\56\1\0\5\56\4\0\7\57\1\0"+
    "\3\57\1\0\4\57\7\0\2\57\7\0\1\56\1\0\2\56\4\0"+
    "\12\57\22\0\2\57\1\0\10\56\1\0\3\56\1\0\27\56\1\0"+
    "\20\56\4\0\6\57\2\0\3\57\1\0\4\57\11\0\1\57\10\0"+
    "\2\56\4\0\12\57\221\0\56\56\1\0\1\56\1\57\2\56\7\57"+
    "\5\0\6\56\1\57\10\57\1\0\12\57\47\0\2\56\1\0\1\56"+
    "\2\0\2\56\1\0\1\56\2\0\1\56\6\0\4\56\1\0\7\56"+
    "\1\0\3\56\1\0\1\56\1\0\1\56\2\0\2\56\1\0\2\56"+
    "\1\0\1\56\1\57\2\56\6\57\1\0\2\57\1\56\2\0\5\56"+
    "\1\0\1\57\1\0\6\57\2\0\12\57\76\0\2\57\6\0\12\57"+
    "\13\0\1\57\1\0\1\57\1\0\1\57\4\0\2\57\10\56\1\0"+
    "\41\56\7\0\24\57\1\0\6\57\4\0\6\57\1\0\1\57\1\0"+
    "\25\57\3\0\7\57\1\0\1\57\346\0\46\56\12\0\47\56\11\0"+
    "\1\56\1\0\2\56\1\0\3\56\1\0\1\56\1\0\2\56\1\0"+
    "\5\56\51\0\1\56\1\0\1\56\1\0\1\56\13\0\1\56\1\0"+
    "\1\56\1\0\1\56\3\0\2\56\3\0\1\56\5\0\3\56\1\0"+
    "\1\56\1\0\1\56\1\0\1\56\1\0\1\56\3\0\2\56\3\0"+
    "\2\56\1\0\1\56\50\0\1\56\11\0\1\56\2\0\1\56\2\0"+
    "\2\56\7\0\2\56\1\0\1\56\1\0\7\56\50\0\1\56\4\0"+
    "\1\56\10\0\1\56\u0c06\0\234\56\4\0\132\56\6\0\26\56\2\0"+
    "\6\56\2\0\46\56\2\0\6\56\2\0\10\56\1\0\1\56\1\0"+
    "\1\56\1\0\1\56\1\0\37\56\2\0\65\56\1\0\7\56\1\0"+
    "\1\56\3\0\3\56\1\0\7\56\3\0\4\56\2\0\6\56\4\0"+
    "\15\56\5\0\3\56\1\0\7\56\323\0\15\57\4\0\1\57\104\0"+
    "\1\56\3\0\2\56\2\0\1\56\121\0\3\56\u0e82\0\1\57\1\0"+
    "\1\56\31\0\11\56\6\57\1\0\5\57\13\0\124\56\4\0\2\57"+
    "\2\0\2\57\2\0\132\56\1\0\3\57\6\0\50\56\u1cd3\0\u51a6\56"+
    "\u0c5a\0\u2ba4\56\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    48,    96,   144,   192,   240,   288,   336,   384,   432, 
      480,   528,   576,   624,   672,   720,   768,   816,   864,   912, 
      960,  1008,  1056,  1104,  1152,  1200,  1248,  1296,  1344,  1392, 
     1440,  1488,  1536,  1584,  1632,  1680,  1632,  1632,  1680,  1728, 
     1632,  1680,  1776,  1824,  1872,  1920,  1968,  2016,  1632,  1680, 
     2064,  2112,  2160,  1632,  2208,  2208,  2256,  2304,  2352,  2064, 
     2400,  2448,  1632,  2496,  2544,  2592,  2640,  1632,  2688,  2736, 
     2784,  2832,  2880,  1632,  2928,  2976,  3024,  3072,  3120,  3168, 
     3216,  3264,  3264,  3312,  3360,  3408,  3456,  3456,  3504,  3552, 
     3600,  3648,  3648,  3696,  3744,  3792,  3840,  1632,  3888,  3888, 
     3936,  3984,  4032,  4080,  1632,  1632,  1680,  1632,  1632,  4128, 
     4176,  4224,  4272,  4320,  4368,  4416,  4464,  1632,  4512,  1632, 
     1632,  2208,  4560,  2304,  1632,  4608,  2352,  1632,  2688,  4656, 
     2784,  1632,  4704,  2832,  4128,  4752,  4800,  4848,  3072,  1632, 
     4896,  4944,  3264,  4992,  3312,  1632,  5040,  5088,  5136,  5136, 
     5184,  5232,  3408,  3264,  3456,  5280,  3504,  1632,  5328,  3552, 
     3600,  3456,  3648,  5376,  3696,  1632,  5424,  5472,  5520,  5520, 
     5568,  5616,  5664,  3888,  5712,  3936,  1632,  5760,  5808,  5856, 
     5856,  5904,  5952,  6000,  6048,  6096,  6144,  6192,  1632,  6240, 
     6288,  1632,  1632,  1632,  1920,  6336,  6384,  6432,  6480,  6528, 
     5040,  6576,  6576,  5424,  6624,  6624,  6672,  5760,  6720,  6720, 
     6768,  1632,  6816,  6864,  1632,  6912,  6960,  7008,  7056,  7104, 
     7152,  5184,  5568,  7200,  5904,  7248,  7296,  7344,  7392,  7440, 
     7488,  7536,  7584,  7632,  7680,  7728,  7776,  7824,  1632,  1632, 
     7872,  7920,  7968,  1632,  1632,  1632,  8016,  8064,  8112,  8160, 
     8208,  1632,  3792,  4032
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\37\1\40\10\37\1\41\4\37\1\42\40\37\1\43"+
    "\1\44\20\43\1\45\35\43\1\46\1\47\56\46\1\43"+
    "\1\44\16\43\1\50\1\43\1\45\35\43\1\51\1\52"+
    "\56\51\1\43\1\44\5\43\1\53\12\43\1\45\36\43"+
    "\1\44\2\43\1\54\1\55\2\43\1\56\3\43\1\55"+
    "\5\43\1\55\2\57\2\56\1\43\12\56\1\43\5\56"+
    "\1\43\2\56\1\43\3\56\2\43\1\44\2\43\1\54"+
    "\1\60\6\43\1\60\5\43\1\60\35\43\1\61\1\62"+
    "\2\61\1\63\15\61\1\45\35\61\1\43\1\44\2\43"+
    "\1\64\15\43\1\45\36\43\1\44\2\43\1\64\1\55"+
    "\2\43\1\65\3\43\1\55\5\43\1\55\4\65\1\43"+
    "\12\65\1\43\5\65\1\43\2\65\1\43\3\65\2\43"+
    "\1\44\2\43\1\64\1\55\2\43\1\65\3\43\1\55"+
    "\5\43\1\55\4\65\1\43\12\65\1\66\5\65\1\43"+
    "\2\65\1\43\3\65\1\43\1\67\1\44\1\43\1\70"+
    "\1\71\1\55\3\67\1\72\1\67\1\73\1\55\5\67"+
    "\1\55\35\67\1\43\1\44\2\43\1\74\15\43\1\45"+
    "\35\43\1\75\1\76\1\77\1\100\4\75\1\101\12\75"+
    "\4\102\1\75\12\102\1\75\5\102\1\75\2\102\1\75"+
    "\3\102\1\75\1\43\1\76\1\77\1\100\1\43\1\55"+
    "\2\43\1\103\3\43\1\55\5\43\1\55\4\103\1\43"+
    "\12\103\1\43\5\103\1\43\2\103\1\43\3\103\2\43"+
    "\1\76\1\77\1\100\1\43\1\55\2\43\1\103\3\43"+
    "\1\55\5\43\1\55\4\103\1\43\12\103\1\104\5\103"+
    "\1\43\2\103\1\43\3\103\1\43\1\105\1\76\1\77"+
    "\1\106\1\105\1\55\3\105\1\107\1\105\1\110\1\55"+
    "\5\105\1\55\35\105\1\43\1\111\1\112\2\43\1\55"+
    "\6\43\1\55\5\43\1\55\6\43\1\113\1\114\2\43"+
    "\1\115\10\43\1\114\1\113\11\43\1\44\1\112\2\43"+
    "\1\55\6\43\1\55\5\43\1\55\4\43\1\116\31\43"+
    "\1\44\1\112\2\43\1\55\2\43\1\117\3\43\1\55"+
    "\5\43\1\55\4\117\1\116\12\117\1\43\5\117\1\43"+
    "\2\117\1\43\3\117\2\43\1\44\1\112\2\43\1\55"+
    "\6\43\1\55\5\43\1\55\4\43\1\116\6\43\1\120"+
    "\5\43\1\121\13\43\1\122\1\44\1\112\1\123\1\122"+
    "\1\55\3\122\1\124\1\122\1\125\1\55\5\122\1\55"+
    "\4\122\1\126\30\122\1\127\1\44\1\112\1\130\1\127"+
    "\1\55\3\127\1\131\1\127\1\132\1\55\5\127\1\55"+
    "\4\127\1\133\30\127\1\134\1\44\1\112\1\135\1\134"+
    "\1\55\3\134\1\136\1\134\1\137\1\55\5\134\1\55"+
    "\35\134\1\140\1\141\1\142\55\140\1\143\1\44\1\112"+
    "\1\144\1\143\1\55\3\143\1\145\1\143\1\146\1\55"+
    "\5\143\1\55\35\143\1\147\1\150\1\151\55\147\1\43"+
    "\1\44\1\112\2\43\1\55\6\43\1\55\5\43\1\55"+
    "\35\43\1\152\1\153\56\152\1\37\1\0\10\37\1\0"+
    "\4\37\1\0\40\37\3\0\1\154\1\155\14\0\1\156"+
    "\43\0\1\157\2\0\1\160\3\0\1\157\5\0\1\157"+
    "\4\160\1\0\12\160\1\0\5\160\1\161\2\160\1\0"+
    "\3\160\6\0\1\157\2\0\1\162\3\0\1\157\5\0"+
    "\1\157\4\162\1\0\12\162\1\0\5\162\1\0\2\162"+
    "\1\0\3\162\102\0\1\163\56\0\1\164\46\0\1\165"+
    "\52\0\1\166\62\0\1\55\6\0\1\55\5\0\1\55"+
    "\43\0\3\56\4\0\1\56\5\0\4\56\1\0\12\56"+
    "\1\0\5\56\1\0\2\56\1\0\4\56\6\0\3\56"+
    "\4\0\1\56\5\0\2\56\1\167\1\56\1\0\12\56"+
    "\1\0\5\56\1\0\2\56\1\0\4\56\5\0\1\60"+
    "\6\0\1\60\5\0\1\60\37\0\1\170\57\0\1\171"+
    "\63\0\3\65\4\0\1\65\5\0\4\65\1\0\12\65"+
    "\1\0\5\65\1\0\2\65\1\0\4\65\1\67\2\0"+
    "\1\172\1\67\1\0\3\67\1\0\1\67\2\0\5\67"+
    "\1\0\36\67\1\0\1\171\1\172\1\67\1\0\3\67"+
    "\1\0\1\67\2\0\5\67\1\0\35\67\1\72\1\0"+
    "\1\173\1\174\1\72\1\173\3\72\1\175\1\72\2\173"+
    "\5\72\1\173\35\72\1\73\1\0\1\176\1\177\1\73"+
    "\1\176\3\73\1\176\1\73\1\175\1\176\5\73\1\176"+
    "\35\73\1\75\3\0\17\75\4\0\1\75\12\0\1\75"+
    "\5\0\1\75\2\0\1\75\3\0\1\75\3\0\1\154"+
    "\15\0\1\156\40\0\1\200\55\0\1\75\3\0\2\75"+
    "\3\101\4\75\1\101\5\75\4\102\1\75\12\102\1\75"+
    "\5\102\1\75\2\102\1\75\3\102\1\101\6\0\3\102"+
    "\4\0\1\102\5\0\4\102\1\0\12\102\1\0\5\102"+
    "\1\0\2\102\1\0\4\102\6\0\3\103\4\0\1\103"+
    "\5\0\4\103\1\0\12\103\1\0\5\103\1\0\2\103"+
    "\1\0\4\103\1\105\2\0\1\201\1\105\1\0\3\105"+
    "\1\0\1\105\2\0\5\105\1\0\36\105\1\0\1\200"+
    "\1\201\1\105\1\0\3\105\1\0\1\105\2\0\5\105"+
    "\1\0\35\105\1\107\1\0\1\202\1\203\1\107\1\202"+
    "\3\107\1\204\1\107\2\202\5\107\1\202\35\107\1\110"+
    "\1\0\1\205\1\206\1\110\1\205\3\110\1\205\1\110"+
    "\1\204\1\205\5\110\1\205\35\110\3\0\1\154\15\0"+
    "\1\207\76\0\1\210\52\0\1\211\11\0\1\211\40\0"+
    "\1\212\31\0\20\213\1\214\37\213\6\0\3\117\4\0"+
    "\1\117\5\0\4\117\1\0\12\117\1\0\5\117\1\0"+
    "\2\117\1\0\4\117\43\0\1\215\66\0\1\216\5\0"+
    "\1\122\2\0\1\217\1\122\1\0\3\122\1\0\1\122"+
    "\2\0\5\122\1\0\35\122\1\124\1\0\1\220\1\221"+
    "\1\124\1\220\3\124\1\222\1\124\2\220\5\124\1\220"+
    "\35\124\1\223\1\0\1\224\1\225\1\226\1\224\3\226"+
    "\1\224\1\223\1\227\1\230\3\226\1\223\1\226\1\230"+
    "\4\226\1\223\26\226\2\223\1\126\2\213\1\231\1\126"+
    "\1\213\3\126\1\213\1\126\2\213\3\126\1\232\1\126"+
    "\1\213\35\126\1\127\2\0\1\233\1\127\1\0\3\127"+
    "\1\0\1\127\2\0\5\127\1\0\35\127\1\131\2\234"+
    "\1\235\1\131\1\234\3\131\1\236\1\131\2\234\5\131"+
    "\1\234\35\131\1\132\2\237\1\240\1\132\1\237\3\132"+
    "\1\237\1\132\1\236\1\237\5\132\1\237\35\132\1\133"+
    "\2\213\1\241\1\133\1\213\3\133\1\213\1\133\2\213"+
    "\3\133\1\242\1\133\1\213\35\133\1\134\2\0\1\243"+
    "\1\134\1\0\3\134\1\0\1\134\2\0\5\134\1\0"+
    "\35\134\1\136\1\0\1\244\1\245\1\136\1\244\3\136"+
    "\1\246\1\136\2\244\5\136\1\244\35\136\1\247\1\0"+
    "\1\250\1\251\1\252\1\250\3\252\1\250\1\247\1\253"+
    "\1\254\3\252\1\247\1\252\1\254\4\252\1\247\26\252"+
    "\2\247\2\140\1\0\57\140\1\0\16\140\1\255\36\140"+
    "\1\143\2\0\1\256\1\143\1\0\3\143\1\0\1\143"+
    "\2\0\5\143\1\0\35\143\1\145\1\0\1\257\1\260"+
    "\1\145\1\257\3\145\1\261\1\145\2\257\5\145\1\257"+
    "\35\145\1\262\1\0\1\263\1\264\1\265\1\263\3\265"+
    "\1\263\1\262\1\266\1\267\3\265\1\262\1\265\1\267"+
    "\4\265\1\262\26\265\2\262\2\147\1\0\57\147\1\0"+
    "\16\147\1\270\36\147\7\0\1\271\17\0\1\272\35\0"+
    "\1\157\2\0\1\37\3\0\1\157\5\0\1\157\4\37"+
    "\1\0\12\37\1\0\5\37\1\0\2\37\1\0\3\37"+
    "\1\0\1\273\1\0\3\273\1\274\3\160\1\273\1\0"+
    "\1\273\1\274\1\160\1\273\1\0\2\273\1\274\4\160"+
    "\1\273\12\160\1\273\5\160\1\273\2\160\1\275\4\160"+
    "\15\0\1\276\6\0\1\277\33\0\1\273\1\0\3\273"+
    "\1\274\3\162\1\273\1\0\1\273\1\274\1\162\1\273"+
    "\1\0\2\273\1\274\4\162\1\273\12\162\1\273\5\162"+
    "\1\273\2\162\1\300\4\162\27\0\1\272\32\0\1\301"+
    "\57\0\1\302\63\0\3\56\4\0\1\56\5\0\3\56"+
    "\1\303\1\0\12\56\1\0\5\56\1\0\2\56\1\0"+
    "\4\56\1\173\1\0\7\173\1\175\46\173\1\176\1\0"+
    "\11\176\1\175\44\176\1\202\1\0\7\202\1\204\46\202"+
    "\1\205\1\0\11\205\1\204\44\205\30\0\1\304\24\0"+
    "\1\304\35\0\1\305\11\0\1\305\47\0\1\306\60\0"+
    "\1\307\75\0\1\310\3\0\1\220\1\0\7\220\1\222"+
    "\46\220\1\223\1\0\1\224\1\311\1\223\1\224\3\223"+
    "\1\224\1\223\1\222\1\224\5\223\1\224\35\223\1\224"+
    "\1\0\11\224\1\222\44\224\1\223\1\0\1\224\1\311"+
    "\1\223\1\224\3\223\1\224\1\223\1\312\1\224\5\223"+
    "\1\224\35\223\13\0\1\313\44\0\1\224\1\0\11\224"+
    "\1\312\44\224\11\234\1\236\46\234\13\237\1\236\44\237"+
    "\1\244\1\0\7\244\1\246\46\244\1\247\1\0\1\250"+
    "\1\314\1\247\1\250\3\247\1\250\1\247\1\246\1\250"+
    "\5\247\1\250\35\247\1\250\1\0\11\250\1\246\44\250"+
    "\1\247\1\0\1\250\1\314\1\247\1\250\3\247\1\250"+
    "\1\247\1\315\1\250\5\247\1\250\35\247\13\0\1\316"+
    "\44\0\1\250\1\0\11\250\1\315\44\250\2\140\1\0"+
    "\24\140\1\317\30\140\1\257\1\0\7\257\1\261\46\257"+
    "\1\262\1\0\1\263\1\320\1\262\1\263\3\262\1\263"+
    "\1\262\1\261\1\263\5\262\1\263\35\262\1\263\1\0"+
    "\11\263\1\261\44\263\1\262\1\0\1\263\1\320\1\262"+
    "\1\263\3\262\1\263\1\262\1\321\1\263\5\262\1\263"+
    "\35\262\13\0\1\322\44\0\1\263\1\0\11\263\1\321"+
    "\44\263\2\147\1\0\24\147\1\323\30\147\7\0\1\324"+
    "\100\0\1\325\27\0\1\273\1\0\10\273\1\0\4\273"+
    "\1\0\33\273\1\0\5\273\1\0\3\273\1\274\4\273"+
    "\1\0\1\273\1\274\2\273\1\0\2\273\1\274\30\273"+
    "\1\326\4\273\15\0\1\276\35\0\1\327\21\0\1\330"+
    "\12\0\3\330\2\0\1\330\10\0\2\330\1\0\1\330"+
    "\2\0\2\330\35\0\1\331\11\0\1\331\40\0\1\332"+
    "\56\0\1\333\65\0\1\334\11\0\1\334\40\0\1\335"+
    "\34\0\2\336\1\0\3\336\2\0\1\227\4\336\1\0"+
    "\6\336\1\0\26\336\5\0\2\337\1\0\3\337\2\0"+
    "\1\253\4\337\1\0\6\337\1\0\26\337\2\0\2\140"+
    "\1\0\25\140\1\340\27\140\3\0\2\341\1\0\3\341"+
    "\2\0\1\266\4\341\1\0\6\341\1\0\26\341\2\0"+
    "\2\147\1\0\25\147\1\342\27\147\31\0\1\343\101\0"+
    "\1\326\21\0\1\330\12\0\3\330\2\0\1\330\10\0"+
    "\2\330\1\0\1\330\1\0\1\327\2\330\45\0\1\344"+
    "\53\0\1\345\55\0\1\346\57\0\1\347\61\0\1\350"+
    "\20\0\2\140\1\0\26\140\1\351\26\140\2\147\1\0"+
    "\26\147\1\352\26\147\32\0\1\353\71\0\1\354\51\0"+
    "\1\355\62\0\1\356\43\0\1\357\62\0\1\360\24\0"+
    "\1\360\2\0\2\140\1\0\27\140\1\361\25\140\2\147"+
    "\1\0\27\147\1\362\25\147\33\0\1\363\61\0\1\364"+
    "\55\0\1\365\11\0\1\365\45\0\1\366\11\0\1\366"+
    "\12\0\2\140\1\0\30\140\1\367\24\140\2\147\1\0"+
    "\30\147\1\370\24\147\32\0\1\371\25\0\2\140\1\0"+
    "\27\140\1\372\25\140\2\147\1\0\27\147\1\373\25\147"+
    "\27\0\1\374\30\0\2\140\1\0\24\140\1\375\30\140"+
    "\2\147\1\0\24\147\1\376\30\147";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  9,  1,  9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  9,  1,  0,  1, 
     0,  1,  0,  0,  0,  9,  1,  9,  9,  0,  0,  0,  9,  0,  0,  9, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  9,  1,  0,  0,  1,  1,  0,  0,  1,  0,  0,  0,  9,  0,  0, 
     0,  1,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  0,  0,  0, 
     9,  1,  0,  0,  1,  1,  0,  1,  0,  0,  1,  1,  9,  0,  0,  9, 
     9,  9,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0, 
     1,  0,  1,  9,  0,  1,  9,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     0,  1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  9,  9, 
     1,  1,  0,  9,  9,  9,  1,  1,  0,  1,  1,  9,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	private ContextRegionContainer fBufferedEmbeddedContainer = null;
	private String f_context = null;

	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();
	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has
	//   been completed
	private int fEmbeddedPostState = YYINITIAL;
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";

	private String context = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	private XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();

	private static final String rcsver = "$Id: XMLTokenizer.java,v 1.1 2004/10/13 15:55:33 ndai Exp $";//$NON-NLS-1$
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public final boolean isCaseSensitiveBlocking() {
	return fIsCaseSensitiveBlocking;
}
/* user method */
public final void setCaseSensitiveBlocking(boolean newValue) {
	fIsCaseSensitiveBlocking = newValue;
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			same = true;
			// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
			// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			
			// safety check for array accesses (yy_currentPos is the *last* character we can check against)
			if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
				for(i = 0; i < searchStringLength; i++) {
					if(same && fIsCaseSensitiveBlocking)
						same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
					else if(same && !fIsCaseSensitiveBlocking)
						same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
				}
			}
			// safety check failed; no match is possible right now
			else {
				same = false;
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}
/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}
/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	fEmbeddedContainer = null;
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		if (fBufferedEmbeddedContainer != null) {
			ITextRegion container = fBufferedEmbeddedContainer;
			fBufferedEmbeddedContainer = null;
			fShouldLoadBuffered = false;
			return container;
		}
		context = fBufferedContext;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == PROXY_CONTEXT) {
			return fEmbeddedContainer;
		}
		else if (context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = yytext();
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	// store the next token
	f_context = primGetNextToken();
	if (f_context == PROXY_CONTEXT) {
		fBufferedEmbeddedContainer = fEmbeddedContainer;
		fShouldLoadBuffered = true;
	}
	else if (f_context == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	}
	else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	fShouldLoadBuffered = true;
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}
	if (context == null) {
		// EOF
		if (Debug.debugTokenizer) {
			System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
		}
		return null;
	}
	fTokenCount++;
	return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
}
/* user method */
public XMLTokenizer(){
	super();
}
/* user method */
public XMLTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (Debug.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fTokenCount = 0;
 
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	start = 0;
	textLength = 0;
	length = 0;

	fEmbeddedContainer = null;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		XMLTokenizer newInstance = new XMLTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", false, XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XMLTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public XMLTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[8256];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2762) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1372) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_counted = false;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 251: 
        case 252: 
        case 253: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 255: break;
        case 245: 
          { 
	if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 256: break;
        case 244: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 257: break;
        case 243: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 258: break;
        case 239: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	fEmbeddedHint = XML_DOCTYPE_EXTERNAL_ID_PUBREF;
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 259: break;
        case 238: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	fEmbeddedHint = XML_DOCTYPE_EXTERNAL_ID_SYSREF;
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 260: break;
        case 214: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 261: break;
        case 211: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 262: break;
        case 194: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 263: break;
        case 193: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 264: break;
        case 192: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 265: break;
        case 191: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 266: break;
        case 188: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 267: break;
        case 139: 
        case 153: 
        case 161: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 268: break;
        case 127: 
          { 
        yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	if(Debug.debugTokenizer)
		dump("empty tag close");//$NON-NLS-1$
        return XML_EMPTY_TAG_CLOSE;
 }
        case 269: break;
        case 120: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 270: break;
        case 62: 
          { 
	if(Debug.debugTokenizer)
		dump("tag close");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);
        return XML_TAG_CLOSE;
 }
        case 271: break;
        case 54: 
        case 56: 
        case 57: 
        case 58: 
        case 124: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 272: break;
        case 53: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 273: break;
        case 52: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 274: break;
        case 48: 
        case 49: 
        case 50: 
          { 
	// block scan until close is found
	return doScan("?>", false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 275: break;
        case 47: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 276: break;
        case 45: 
        case 46: 
        case 118: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_CONTENT;
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 277: break;
        case 40: 
        case 41: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 278: break;
        case 37: 
        case 38: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	fEmbeddedHint = XML_CDATA_TEXT;
	fEmbeddedPostState = ST_CDATA_TEXT;
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
 }
        case 279: break;
        case 0: 
        case 30: 
        case 111: 
        case 113: 
        case 186: 
        case 187: 
        case 213: 
          { 
	if(Debug.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 280: break;
        case 6: 
        case 10: 
        case 11: 
        case 12: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 26: 
        case 28: 
        case 44: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 281: break;
        case 14: 
        case 60: 
          { 
	if(Debug.debugTokenizer)
		dump("inappropriate tag name");//$NON-NLS-1$
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 282: break;
        case 25: 
        case 95: 
        case 96: 
        case 172: 
        case 206: 
        case 223: 
        case 232: 
        case 240: 
        case 246: 
        case 249: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 283: break;
        case 27: 
        case 102: 
        case 103: 
        case 183: 
        case 210: 
        case 225: 
        case 233: 
        case 241: 
        case 247: 
        case 250: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 284: break;
        case 31: 
        case 61: 
        case 72: 
          { 
	if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_TAG_OPEN;
 }
        case 285: break;
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 39: 
        case 42: 
        case 43: 
        case 51: 
        case 55: 
        case 59: 
        case 63: 
        case 69: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 79: 
        case 80: 
        case 82: 
        case 87: 
        case 92: 
        case 99: 
          { 
	if (Debug.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 286: break;
        case 36: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 287: break;
        case 64: 
        case 65: 
          { 
	if(Debug.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 288: break;
        case 66: 
          { 
	if(Debug.debugTokenizer)
		dump("attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 289: break;
        case 67: 
          { 
	if(Debug.debugTokenizer)
		dump("equals");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 290: break;
        case 68: 
        case 70: 
        case 71: 
        case 131: 
          { 
	if(Debug.debugTokenizer)
		dump("attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 291: break;
        case 73: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 292: break;
        case 78: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 293: break;
        case 81: 
        case 83: 
        case 84: 
        case 85: 
        case 145: 
        case 146: 
        case 149: 
        case 150: 
        case 201: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 294: break;
        case 86: 
        case 88: 
        case 89: 
        case 90: 
        case 157: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 295: break;
        case 91: 
        case 93: 
        case 94: 
        case 165: 
        case 166: 
        case 169: 
        case 170: 
        case 204: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 296: break;
        case 97: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 297: break;
        case 98: 
        case 100: 
        case 101: 
        case 176: 
        case 177: 
        case 180: 
        case 181: 
        case 208: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 298: break;
        case 104: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 299: break;
        case 107: 
          { 
	if(Debug.debugTokenizer)
		dump("\nend tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 300: break;
        case 108: 
          { 
	if(Debug.debugTokenizer)
		dump("\nprocessing instruction start");//$NON-NLS-1$
	yybegin(ST_PI);
        return XML_PI_OPEN;
 }
        case 301: break;
        case 109: 
          { 
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 302: break;
        case 117: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 303: break;
        case 119: 
          { 
		// ended with nothing inside
		fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 304: break;
        case 105: 
        case 106: 
          { 
		return doBlockTagScan();
	 }
        case 305: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints each returned token to System.out until the end of
   * file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    for (int i = 0; i < argv.length; i++) {
      XMLTokenizer scanner = null;
      try {
        scanner = new XMLTokenizer( new java.io.FileReader(argv[i]) );
      }
      catch (java.io.FileNotFoundException e) {
        System.out.println("File not found : \""+argv[i]+"\"");
        System.exit(1);
      }
//      catch (java.io.IOException e) {
//        System.out.println("Error opening file \""+argv[i]+"\"");
//        System.exit(1);
//      }
      catch (ArrayIndexOutOfBoundsException e) {
        System.out.println("Usage : java XMLTokenizer <inputfile>");
        System.exit(1);
      }

      try {
        do {
          System.out.println(scanner.primGetNextToken());
        } while (!scanner.yy_atEOF);

      }
      catch (java.io.IOException e) {
        System.out.println("An I/O error occured while scanning :");
        System.out.println(e);
        System.exit(1);
      }
      catch (Exception e) {
        e.printStackTrace();
        System.exit(1);
      }
    }
  }


}
