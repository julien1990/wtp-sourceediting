<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.wst.sse.ui">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.wst.sse.ui" id="sourcevalidation" name="sourcevalidation"/>
      </appInfo>
      <documentation>
         This extension point is provided to allow clients to contribute a validator (org.eclipse.wst.validation.internal.provisional.core.IValidator)
for as-you-type (source) validation.

If your validator can handle &quot;partial document&quot; validation, it should also implement ISourceValidator.  The validate call on ISourceValidator gets passed an IRegion representation of the part of the document that&apos;s dirty.  

This should be much more efficient than validating the entire file each time someone types.

The validator is enabled for specific content type/partition combinations.

Required plugins are:
   org.eclipse.wst.sse.ui
   org.eclipse.wst.validation
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="validator"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="validator">
      <complexType>
         <sequence>
            <element ref="contentTypeIdentifier" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="scope" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="partitionType">
      <complexType>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="contentTypeIdentifier">
      <complexType>
         <sequence>
            <element ref="partitionType" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         WTP 1.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Example demonstrating how HTMLValidator contributes to as-you-type validation in the source editor.

&lt;extension
           point=&quot;org.eclipse.wst.sse.ui.extensions.sourcevalidation&quot;&gt;
        &lt;validator
              scope=&quot;total&quot;
              class=&quot;org.eclipse.wst.validation.html.HTMLValidator&quot;
              id=&quot;org.eclipse.wst.validation.htmlsourcevalidator&quot;&gt;
           &lt;contentTypeIdentifier
                 id=&quot;org.eclipse.wst.html.core.htmlsource&quot;&gt;
              &lt;partitionType
                    id=&quot;org.eclipse.wst.html.HTML_DEFAULT&quot;&gt;
              &lt;/partitionType&gt;
           &lt;/contentTypeIdentifier&gt;
           &lt;contentTypeIdentifier
                 id=&quot;org.eclipse.jst.jsp.core.jspsource&quot;&gt;
              &lt;partitionType
                    id=&quot;org.eclipse.wst.html.HTML_DEFAULT&quot;&gt;
              &lt;/partitionType&gt;
           &lt;/contentTypeIdentifier&gt;
        &lt;/validator&gt;
&lt;/extension&gt;

Using ISourceValidator

If your validator can handle &quot;partial document&quot; validation, it should  implement ISourceValidator.  

The validate call on ISourceValidator gets passed an IRegion of the document which represents just the part that&apos;s dirty.  This should be much more efficient than validating the entire file each time someone types.

ISourceValidator has its &quot;connect(IDocument doc)&quot; method called when it&apos;s hooked up to the document (when the editor is opened), and &quot;disconnect(IDocument doc)&quot; called when the editor is closed, where any &quot;unhooking&quot; should take place.

      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         Example demonstrating how HTMLValidator contributes to as-you-type validation in the source editor.

&lt;extension
           point=&quot;org.eclipse.wst.sse.ui.extensions.sourcevalidation&quot;&gt;
        &lt;validator
              scope=&quot;total&quot;
              class=&quot;org.eclipse.wst.validation.html.HTMLValidator&quot;
              id=&quot;org.eclipse.wst.validation.htmlsourcevalidator&quot;&gt;
           &lt;contentTypeIdentifier
                 id=&quot;org.eclipse.wst.html.core.htmlsource&quot;&gt;
              &lt;partitionType
                    id=&quot;org.eclipse.wst.html.HTML_DEFAULT&quot;&gt;
              &lt;/partitionType&gt;
           &lt;/contentTypeIdentifier&gt;
           &lt;contentTypeIdentifier
                 id=&quot;org.eclipse.jst.jsp.core.jspsource&quot;&gt;
              &lt;partitionType
                    id=&quot;org.eclipse.wst.html.HTML_DEFAULT&quot;&gt;
              &lt;/partitionType&gt;
           &lt;/contentTypeIdentifier&gt;
        &lt;/validator&gt;
&lt;/extension&gt;


Using ISourceValidator

If your validator can handle &quot;partial document&quot; validation, it should  implement ISourceValidator.  

The validate call on ISourceValidator gets passed an IRegion of the document which represents just the part that&apos;s dirty.  This should be much more efficient than validating the entire file each time someone types.

ISourceValidator has its &quot;connect(IDocument doc)&quot; method called when it&apos;s hooked up to the document (when the editor is opened), and &quot;disconnect(IDocument doc)&quot; called when the editor is closed, where any &quot;unhooking&quot; should take place.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         Currently there is no supplied implementation for IValidator.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

</schema>
