Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {EOF COMMA AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [Expr ::= (*) ExprSingle , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF COMMA AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF COMMA AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {EOF COMMA OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [$START ::= (*) XPath EOF , {EOF }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {EOF COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [Expr ::= (*) Expr COMMA ExprSingle , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF COMMA AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {EOF COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) AndExpr , {EOF COMMA OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [XPath ::= (*) Expr , {EOF }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [59]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on Expr to state [28]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on XPath to state [8]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [1]: {
  [UnqualifiedNCName ::= DESCENDANT_OR_SELF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= DESCENDANT_OR_SELF (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [NCName ::= DESCENDANT_OR_SELF (*) , {COLON }]
}
transition on COLONCOLON to state [398]

-------------------
lalr_state [2]: {
  [NumericLiteral ::= DecimalLiteral (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [3]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [PathExpr ::= FORWARD_SLASHSLASH (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on IF to state [129]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on IS to state [88]
transition on CASTABLE to state [89]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [397]
transition on ITEM to state [84]
transition on COMMENT to state [82]
transition on NCNAME to state [83]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [4]: {
  [ExprSingle ::= OrExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [OrExpr ::= OrExpr (*) OR AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
}
transition on OR to state [395]

-------------------
lalr_state [5]: {
  [NCName ::= FOLLOWING (*) , {COLON }]
  [UnqualifiedNCName ::= FOLLOWING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= FOLLOWING (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}
transition on COLONCOLON to state [394]

-------------------
lalr_state [6]: {
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= ReverseAxis (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on NameTest to state [110]
transition on QName to state [289]
transition on SchemaElementTest to state [79]
transition on NODE to state [17]
transition on ATTRIBUTE to state [288]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [37]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [38]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on Wildcard to state [49]
transition on TREAT to state [14]
transition on CommentTest to state [19]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on KindTest to state [45]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on DESCENDANT to state [156]
transition on OF to state [106]
transition on ElementTest to state [67]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on NodeTest to state [393]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on DocumentTest to state [18]
transition on OR to state [96]
transition on IN to state [95]
transition on PITest to state [58]
transition on AnyKindTest to state [112]
transition on UnqualifiedNCName to state [72]
transition on AttributeTest to state [80]
transition on SCHEMA_ELEMENT to state [42]
transition on IS to state [88]
transition on AND to state [120]
transition on PROCESSING_INSTRUCTION to state [94]
transition on STAR to state [69]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on COMMENT to state [82]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SchemaAttributeTest to state [87]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on TextTest to state [103]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [7]: {
  [NCName ::= PARENT (*) , {COLON }]
  [ReverseAxis ::= PARENT (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= PARENT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on COLONCOLON to state [392]

-------------------
lalr_state [8]: {
  [$START ::= XPath (*) EOF , {EOF }]
}
transition on EOF to state [391]

-------------------
lalr_state [9]: {
  [CastExpr ::= UnaryExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [CastExpr ::= UnaryExpr (*) CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on CAST to state [388]

-------------------
lalr_state [10]: {
  [InstanceofExpr ::= TreatExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= TreatExpr (*) INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on INSTANCE to state [385]

-------------------
lalr_state [11]: {
  [DocumentTest ::= DOCUMENT_NODE (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= DOCUMENT_NODE (*) , {COLON }]
  [DocumentTest ::= DOCUMENT_NODE (*) LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= DOCUMENT_NODE (*) LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [377]

-------------------
lalr_state [12]: {
  [UnqualifiedNCName ::= NAMESPACE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= NAMESPACE (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [NCName ::= NAMESPACE (*) , {COLON }]
}
transition on COLONCOLON to state [376]

-------------------
lalr_state [13]: {
  [NumericLiteral ::= DoubleLiteral (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [14]: {
  [UnqualifiedNCName ::= TREAT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= TREAT (*) , {COLON }]
}

-------------------
lalr_state [15]: {
  [PrimaryExpr ::= FunctionCall (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [16]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= FORWARD_SLASH (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [PathExpr ::= FORWARD_SLASH (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on IF to state [129]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on IS to state [88]
transition on CASTABLE to state [89]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [375]
transition on ITEM to state [84]
transition on COMMENT to state [82]
transition on NCNAME to state [83]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [17]: {
  [AnyKindTest ::= NODE (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= NODE (*) , {COLON }]
}
transition on LPAR to state [373]

-------------------
lalr_state [18]: {
  [KindTest ::= DocumentTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [19]: {
  [KindTest ::= CommentTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [20]: {
  [AdditiveExpr ::= AdditiveExpr (*) PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [RangeExpr ::= AdditiveExpr (*) , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [AdditiveExpr ::= AdditiveExpr (*) MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [RangeExpr ::= AdditiveExpr (*) TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
}
transition on MINUS to state [369]
transition on PLUS to state [368]
transition on TO to state [367]

-------------------
lalr_state [21]: {
  [StepExpr ::= AxisStep (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [22]: {
  [ReverseAxis ::= ANCESTOR (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= ANCESTOR (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ANCESTOR (*) , {COLON }]
}
transition on COLONCOLON to state [366]

-------------------
lalr_state [23]: {
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= ForwardAxis (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on NameTest to state [110]
transition on QName to state [289]
transition on SchemaElementTest to state [79]
transition on NODE to state [17]
transition on ATTRIBUTE to state [288]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [37]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [38]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on Wildcard to state [49]
transition on TREAT to state [14]
transition on CommentTest to state [19]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on KindTest to state [45]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on DESCENDANT to state [156]
transition on OF to state [106]
transition on ElementTest to state [67]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on NodeTest to state [365]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on DocumentTest to state [18]
transition on OR to state [96]
transition on IN to state [95]
transition on PITest to state [58]
transition on AnyKindTest to state [112]
transition on UnqualifiedNCName to state [72]
transition on AttributeTest to state [80]
transition on SCHEMA_ELEMENT to state [42]
transition on IS to state [88]
transition on AND to state [120]
transition on PROCESSING_INSTRUCTION to state [94]
transition on STAR to state [69]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on COMMENT to state [82]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SchemaAttributeTest to state [87]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on TextTest to state [103]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [24]: {
  [CastableExpr ::= CastExpr (*) CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= CastExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on CASTABLE to state [360]

-------------------
lalr_state [25]: {
  [IntegerLiteral ::= INTEGER (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [26]: {
  [DoubleLiteral ::= DOUBLE (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [27]: {
  [ExprSingle ::= QuantifiedExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}

-------------------
lalr_state [28]: {
  [Expr ::= Expr (*) COMMA ExprSingle , {EOF COMMA }]
  [XPath ::= Expr (*) , {EOF }]
}
transition on COMMA to state [139]

-------------------
lalr_state [29]: {
  [NCName ::= CHILD (*) , {COLON }]
  [UnqualifiedNCName ::= CHILD (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= CHILD (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}
transition on COLONCOLON to state [359]

-------------------
lalr_state [30]: {
  [NCName ::= FOLLOWING_SIBLING (*) , {COLON }]
  [UnqualifiedNCName ::= FOLLOWING_SIBLING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= FOLLOWING_SIBLING (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}
transition on COLONCOLON to state [358]

-------------------
lalr_state [31]: {
  [Prefix ::= NCName (*) , {COLON }]
}

-------------------
lalr_state [32]: {
  [IntersectExceptExpr ::= InstanceofExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [33]: {
  [UnionExpr ::= UnionExpr (*) UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= UnionExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr (*) PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PIPE to state [259]
transition on UNION to state [258]

-------------------
lalr_state [34]: {
  [NCName ::= EVERY (*) , {COLON }]
  [QuantifiedExpr ::= EVERY (*) DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= EVERY (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on DOLLAR to state [354]

-------------------
lalr_state [35]: {
  [NCName ::= SELF (*) , {COLON }]
  [UnqualifiedNCName ::= SELF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= SELF (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}
transition on COLONCOLON to state [353]

-------------------
lalr_state [36]: {
  [NCName ::= INSTANCE (*) , {COLON }]
  [UnqualifiedNCName ::= INSTANCE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [37]: {
  [NCName ::= TEXT (*) , {COLON }]
  [TextTest ::= TEXT (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [351]

-------------------
lalr_state [38]: {
  [ElementTest ::= ELEMENT (*) LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ElementTest ::= ELEMENT (*) LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ElementTest ::= ELEMENT (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ELEMENT (*) , {COLON }]
  [ElementTest ::= ELEMENT (*) LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [340]

-------------------
lalr_state [39]: {
  [UnqualifiedNCName ::= THEN (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= THEN (*) , {COLON }]
}

-------------------
lalr_state [40]: {
  [PrimaryExpr ::= ContextItemExpr (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [41]: {
  [PredicateList ::= (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= (*) PredicateList Predicate , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= ReverseStep (*) PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PredicateList to state [339]

-------------------
lalr_state [42]: {
  [SchemaElementTest ::= SCHEMA_ELEMENT (*) LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= SCHEMA_ELEMENT (*) , {COLON }]
}
transition on LPAR to state [334]

-------------------
lalr_state [43]: {
  [SchemaAttributeTest ::= SCHEMA_ATTRIBUTE (*) LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= SCHEMA_ATTRIBUTE (*) , {COLON }]
}
transition on LPAR to state [330]

-------------------
lalr_state [44]: {
  [TreatExpr ::= CastableExpr (*) TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= CastableExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on TREAT to state [313]

-------------------
lalr_state [45]: {
  [NodeTest ::= KindTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [46]: {
  [UnqualifiedNCName ::= ANCESTOR_OR_SELF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ANCESTOR_OR_SELF (*) , {COLON }]
  [ReverseAxis ::= ANCESTOR_OR_SELF (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}
transition on COLONCOLON to state [312]

-------------------
lalr_state [47]: {
  [AndExpr ::= ComparisonExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}

-------------------
lalr_state [48]: {
  [GeneralComp ::= (*) EQUALS , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [GeneralComp ::= (*) GREATEREQUAL , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ComparisonExpr ::= RangeExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [ValueComp ::= (*) GT , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [GeneralComp ::= (*) LESSEQUAL , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ValueComp ::= (*) LT , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ComparisonExpr ::= RangeExpr (*) NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [NodeComp ::= (*) LESS_LESS , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [GeneralComp ::= (*) NOTEQUALS , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ValueComp ::= (*) EQ , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ComparisonExpr ::= RangeExpr (*) ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [ValueComp ::= (*) GE , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [GeneralComp ::= (*) GREATER , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ValueComp ::= (*) LE , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [NodeComp ::= (*) GREATER_GREATER , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [GeneralComp ::= (*) LESSTHAN , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ValueComp ::= (*) NE , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [NodeComp ::= (*) IS , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
  [ComparisonExpr ::= RangeExpr (*) GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}
transition on GREATEREQUAL to state [308]
transition on NodeComp to state [307]
transition on GeneralComp to state [306]
transition on LESS_LESS to state [305]
transition on EQ to state [304]
transition on GE to state [303]
transition on ValueComp to state [302]
transition on LESSTHAN to state [301]
transition on NOTEQUALS to state [300]
transition on EQUALS to state [299]
transition on LE to state [298]
transition on LESSEQUAL to state [297]
transition on GT to state [296]
transition on GREATER to state [295]
transition on GREATER_GREATER to state [294]
transition on NE to state [293]
transition on LT to state [292]
transition on IS to state [291]

-------------------
lalr_state [49]: {
  [NameTest ::= Wildcard (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [50]: {
  [ExprSingle ::= IfExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}

-------------------
lalr_state [51]: {
  [NCName ::= PRECEDING (*) , {COLON }]
  [ReverseAxis ::= PRECEDING (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= PRECEDING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on COLONCOLON to state [290]

-------------------
lalr_state [52]: {
  [NCName ::= EMPTY (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [53]: {
  [UnqualifiedNCName ::= MOD (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= MOD (*) , {COLON }]
}

-------------------
lalr_state [54]: {
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= AT_SYM (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on NameTest to state [110]
transition on QName to state [289]
transition on SchemaElementTest to state [79]
transition on NODE to state [17]
transition on ATTRIBUTE to state [288]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [37]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [38]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on Wildcard to state [49]
transition on TREAT to state [14]
transition on CommentTest to state [19]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on KindTest to state [45]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on DESCENDANT to state [156]
transition on OF to state [106]
transition on ElementTest to state [67]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on NodeTest to state [287]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on DocumentTest to state [18]
transition on OR to state [96]
transition on IN to state [95]
transition on PITest to state [58]
transition on AnyKindTest to state [112]
transition on UnqualifiedNCName to state [72]
transition on AttributeTest to state [80]
transition on SCHEMA_ELEMENT to state [42]
transition on IS to state [88]
transition on AND to state [120]
transition on PROCESSING_INSTRUCTION to state [94]
transition on STAR to state [69]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on COMMENT to state [82]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SchemaAttributeTest to state [87]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on TextTest to state [103]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [55]: {
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [VarName ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [VarRef ::= DOLLAR (*) VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [168]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on VarName to state [286]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [56]: {
  [UnqualifiedNCName ::= EXCEPT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= EXCEPT (*) , {COLON }]
}

-------------------
lalr_state [57]: {
  [StepExpr ::= FilterExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [58]: {
  [KindTest ::= PITest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [59]: {
  [Expr ::= ExprSingle (*) , {EOF RBRACKET RPAR COMMA }]
}

-------------------
lalr_state [60]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnaryExpr ::= PLUS (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on IS to state [88]
transition on CASTABLE to state [89]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on COMMENT to state [82]
transition on NCNAME to state [83]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on UnaryExpr to state [285]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [61]: {
  [UnqualifiedNCName ::= IDIV (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= IDIV (*) , {COLON }]
}

-------------------
lalr_state [62]: {
  [AxisStep ::= ForwardStep (*) PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= (*) PredicateList Predicate , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PredicateList to state [284]

-------------------
lalr_state [63]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= LPAR (*) Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [Expr ::= (*) ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) AxisStep , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [Expr ::= (*) Expr COMMA ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on CASTABLE to state [89]
transition on MINUS to state [90]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on RPAR to state [282]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [59]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on Expr to state [281]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [64]: {
  [UnqualifiedNCName ::= UNION (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= UNION (*) , {COLON }]
}

-------------------
lalr_state [65]: {
  [FunctionCall ::= QName (*) LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= QName (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= QName (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [274]

-------------------
lalr_state [66]: {
  [DecimalLiteral ::= DECIMAL (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [67]: {
  [KindTest ::= ElementTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [68]: {
  [NCName ::= FOR (*) , {COLON }]
  [SimpleForClause ::= FOR (*) DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= FOR (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on DOLLAR to state [270]

-------------------
lalr_state [69]: {
  [Wildcard ::= STAR (*) COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= STAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on COLON to state [268]

-------------------
lalr_state [70]: {
  [UnqualifiedNCName ::= PRECEDING_SIBLING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= PRECEDING_SIBLING (*) , {COLON }]
  [ReverseAxis ::= PRECEDING_SIBLING (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}
transition on COLONCOLON to state [267]

-------------------
lalr_state [71]: {
  [UnqualifiedNCName ::= DIV (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= DIV (*) , {COLON }]
}

-------------------
lalr_state [72]: {
  [UnqualifiedLocalPart ::= UnqualifiedNCName (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [73]: {
  [UnqualifiedNCName ::= RETURN (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= RETURN (*) , {COLON }]
}

-------------------
lalr_state [74]: {
  [UnqualifiedNCName ::= ELSE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ELSE (*) , {COLON }]
}

-------------------
lalr_state [75]: {
  [PrimaryExpr ::= VarRef (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [76]: {
  [ExprSingle ::= ForExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}

-------------------
lalr_state [77]: {
  [AbbrevReverseStep ::= DOTDOT (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [78]: {
  [ContextItemExpr ::= DOT (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [79]: {
  [KindTest ::= SchemaElementTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [80]: {
  [KindTest ::= AttributeTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [81]: {
  [NCName ::= INTERSECT (*) , {COLON }]
  [UnqualifiedNCName ::= INTERSECT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [82]: {
  [NCName ::= COMMENT (*) , {COLON }]
  [CommentTest ::= COMMENT (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [265]

-------------------
lalr_state [83]: {
  [UnqualifiedNCName ::= NCNAME (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= NCNAME (*) , {COLON }]
}

-------------------
lalr_state [84]: {
  [NCName ::= ITEM (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [85]: {
  [MultiplicativeExpr ::= MultiplicativeExpr (*) IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [AdditiveExpr ::= MultiplicativeExpr (*) , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on IDIV to state [256]
transition on DIV to state [255]
transition on MOD to state [254]
transition on STAR to state [253]

-------------------
lalr_state [86]: {
  [RelativePathExpr ::= RelativePathExpr (*) FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= RelativePathExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= RelativePathExpr (*) FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on FORWARD_SLASHSLASH to state [250]
transition on FORWARD_SLASH to state [249]

-------------------
lalr_state [87]: {
  [KindTest ::= SchemaAttributeTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [88]: {
  [UnqualifiedNCName ::= IS (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= IS (*) , {COLON }]
}

-------------------
lalr_state [89]: {
  [NCName ::= CASTABLE (*) , {COLON }]
  [UnqualifiedNCName ::= CASTABLE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [90]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnaryExpr ::= MINUS (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on IS to state [88]
transition on CASTABLE to state [89]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on COMMENT to state [82]
transition on NCNAME to state [83]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on UnaryExpr to state [248]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [91]: {
  [PrimaryExpr ::= ParenthesizedExpr (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [92]: {
  [ReverseStep ::= AbbrevReverseStep (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [93]: {
  [QName ::= Prefix (*) COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}
transition on COLON to state [245]

-------------------
lalr_state [94]: {
  [PITest ::= PROCESSING_INSTRUCTION (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= PROCESSING_INSTRUCTION (*) , {COLON }]
  [PITest ::= PROCESSING_INSTRUCTION (*) LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= PROCESSING_INSTRUCTION (*) LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [203]

-------------------
lalr_state [95]: {
  [UnqualifiedNCName ::= IN (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= IN (*) , {COLON }]
}

-------------------
lalr_state [96]: {
  [UnqualifiedNCName ::= OR (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= OR (*) , {COLON }]
}

-------------------
lalr_state [97]: {
  [PrimaryExpr ::= Literal (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [98]: {
  [ForwardAxis ::= ATTRIBUTE (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AttributeTest ::= ATTRIBUTE (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= ATTRIBUTE (*) LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ATTRIBUTE (*) , {COLON }]
  [AttributeTest ::= ATTRIBUTE (*) LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [192]
transition on COLONCOLON to state [191]

-------------------
lalr_state [99]: {
  [UnaryExpr ::= ValueExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [100]: {
  [NCName ::= IF (*) , {COLON }]
  [IfExpr ::= IF (*) LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}
transition on LPAR to state [184]

-------------------
lalr_state [101]: {
  [ValueExpr ::= PathExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [102]: {
  [QName ::= UnqualifiedLocalPart (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [103]: {
  [KindTest ::= TextTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [104]: {
  [NCName ::= TYPESWITCH (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [105]: {
  [UnqualifiedNCName ::= CAST (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= CAST (*) , {COLON }]
}

-------------------
lalr_state [106]: {
  [NCName ::= OF (*) , {COLON }]
  [UnqualifiedNCName ::= OF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [107]: {
  [UnqualifiedNCName ::= DESCENDANT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= DESCENDANT (*) COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [NCName ::= DESCENDANT (*) , {COLON }]
}
transition on COLONCOLON to state [183]

-------------------
lalr_state [108]: {
  [UnqualifiedNCName ::= SOME (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= SOME (*) , {COLON }]
  [QuantifiedExpr ::= SOME (*) DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}
transition on DOLLAR to state [171]

-------------------
lalr_state [109]: {
  [SimpleForClause ::= SimpleForClause (*) COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [ForExpr ::= SimpleForClause (*) RETURN ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}
transition on RETURN to state [143]
transition on COMMA to state [142]

-------------------
lalr_state [110]: {
  [NodeTest ::= NameTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [111]: {
  [FilterExpr ::= PrimaryExpr (*) PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= (*) PredicateList Predicate , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PredicateList to state [135]

-------------------
lalr_state [112]: {
  [KindTest ::= AnyKindTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [113]: {
  [ForwardStep ::= AbbrevForwardStep (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [114]: {
  [NumericLiteral ::= IntegerLiteral (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [115]: {
  [Literal ::= NumericLiteral (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [116]: {
  [StringLiteral ::= STRING (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [117]: {
  [AbbrevForwardStep ::= NodeTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [118]: {
  [NCName ::= SATISFIES (*) , {COLON }]
  [UnqualifiedNCName ::= SATISFIES (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [119]: {
  [IntersectExceptExpr ::= IntersectExceptExpr (*) INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= IntersectExceptExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= IntersectExceptExpr (*) EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on INTERSECT to state [132]
transition on EXCEPT to state [131]

-------------------
lalr_state [120]: {
  [UnqualifiedNCName ::= AND (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= AND (*) , {COLON }]
}

-------------------
lalr_state [121]: {
  [Literal ::= StringLiteral (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [122]: {
  [NCName ::= TO (*) , {COLON }]
  [UnqualifiedNCName ::= TO (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [123]: {
  [OrExpr ::= AndExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [AndExpr ::= AndExpr (*) AND ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}
transition on AND to state [125]

-------------------
lalr_state [124]: {
  [RelativePathExpr ::= StepExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [125]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AndExpr ::= AndExpr AND (*) ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [127]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [126]: {
  [NCName ::= EVERY (*) , {COLON }]
  [UnqualifiedNCName ::= EVERY (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [127]: {
  [AndExpr ::= AndExpr AND ComparisonExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}

-------------------
lalr_state [128]: {
  [NCName ::= FOR (*) , {COLON }]
  [UnqualifiedNCName ::= FOR (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [129]: {
  [NCName ::= IF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [130]: {
  [UnqualifiedNCName ::= SOME (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= SOME (*) , {COLON }]
}

-------------------
lalr_state [131]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= IntersectExceptExpr EXCEPT (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on IS to state [88]
transition on CASTABLE to state [89]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on InstanceofExpr to state [134]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [132]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= IntersectExceptExpr INTERSECT (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on InstanceofExpr to state [133]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [133]: {
  [IntersectExceptExpr ::= IntersectExceptExpr INTERSECT InstanceofExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [134]: {
  [IntersectExceptExpr ::= IntersectExceptExpr EXCEPT InstanceofExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [135]: {
  [Predicate ::= (*) LBRACKET Expr RBRACKET , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= PredicateList (*) Predicate , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= PrimaryExpr PredicateList (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LBRACKET to state [137]
transition on Predicate to state [136]

-------------------
lalr_state [136]: {
  [PredicateList ::= PredicateList Predicate (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [137]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {RBRACKET COMMA AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {RBRACKET PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [Expr ::= (*) ExprSingle , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {RBRACKET COMMA AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {RBRACKET PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {RBRACKET COMMA AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {RBRACKET PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) AxisStep , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {RBRACKET EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {RBRACKET PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {RBRACKET COMMA OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {RBRACKET PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {RBRACKET COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {RBRACKET PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [Expr ::= (*) Expr COMMA ExprSingle , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {RBRACKET COMMA AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {RBRACKET PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Predicate ::= LBRACKET (*) Expr RBRACKET , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {RBRACKET COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {RBRACKET PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {RBRACKET COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) AndExpr , {RBRACKET COMMA OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {RBRACKET EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET RBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {RBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [59]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on Expr to state [138]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [138]: {
  [Expr ::= Expr (*) COMMA ExprSingle , {RBRACKET COMMA }]
  [Predicate ::= LBRACKET Expr (*) RBRACKET , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RBRACKET to state [140]
transition on COMMA to state [139]

-------------------
lalr_state [139]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {EOF RBRACKET RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF RBRACKET RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {EOF RBRACKET RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {EOF RBRACKET RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Expr ::= Expr COMMA (*) ExprSingle , {EOF RBRACKET RPAR COMMA }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {EOF RBRACKET RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) AndExpr , {EOF RBRACKET RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [141]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [140]: {
  [Predicate ::= LBRACKET Expr RBRACKET (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [141]: {
  [Expr ::= Expr COMMA ExprSingle (*) , {EOF RBRACKET RPAR COMMA }]
}

-------------------
lalr_state [142]: {
  [SimpleForClause ::= SimpleForClause COMMA (*) DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
}
transition on DOLLAR to state [145]

-------------------
lalr_state [143]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) ForExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) IfExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForExpr ::= SimpleForClause RETURN (*) ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) OrExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [144]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [144]: {
  [ForExpr ::= SimpleForClause RETURN ExprSingle (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}

-------------------
lalr_state [145]: {
  [UnqualifiedNCName ::= (*) TREAT , {IN }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {IN }]
  [UnqualifiedNCName ::= (*) CHILD , {IN }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {IN }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {IN }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [SimpleForClause ::= SimpleForClause COMMA DOLLAR (*) VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) CASTABLE , {IN }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {IN }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {IN }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {IN }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {IN }]
  [UnqualifiedNCName ::= (*) SELF , {IN }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {IN }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {IN }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {IN }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {IN }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {IN }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [VarName ::= (*) QName , {IN }]
  [UnqualifiedNCName ::= (*) OR , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {IN }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {IN }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {IN }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {IN }]
  [UnqualifiedNCName ::= (*) DIV , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {IN }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {IN }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {IN }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {IN }]
  [UnqualifiedNCName ::= (*) IDIV , {IN }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {IN }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {IN }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {IN }]
  [UnqualifiedNCName ::= (*) NCNAME , {IN }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {IN }]
  [UnqualifiedNCName ::= (*) PARENT , {IN }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {IN }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {IN }]
  [UnqualifiedNCName ::= (*) TO , {IN }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {IN }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [168]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on VarName to state [150]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [146]: {
  [UnqualifiedNCName ::= PRECEDING_SIBLING (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= PRECEDING_SIBLING (*) , {COLON }]
}

-------------------
lalr_state [147]: {
  [UnqualifiedNCName ::= NAMESPACE (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= NAMESPACE (*) , {COLON }]
}

-------------------
lalr_state [148]: {
  [NCName ::= COMMENT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [149]: {
  [NCName ::= SCHEMA_ATTRIBUTE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [150]: {
  [SimpleForClause ::= SimpleForClause COMMA DOLLAR VarName (*) IN ExprSingle , {COMMA RETURN }]
}
transition on IN to state [169]

-------------------
lalr_state [151]: {
  [NCName ::= CHILD (*) , {COLON }]
  [UnqualifiedNCName ::= CHILD (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [152]: {
  [NCName ::= PROCESSING_INSTRUCTION (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [153]: {
  [NCName ::= SCHEMA_ELEMENT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [154]: {
  [NCName ::= FOLLOWING_SIBLING (*) , {COLON }]
  [UnqualifiedNCName ::= FOLLOWING_SIBLING (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [155]: {
  [UnqualifiedNCName ::= DESCENDANT_OR_SELF (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= DESCENDANT_OR_SELF (*) , {COLON }]
}

-------------------
lalr_state [156]: {
  [UnqualifiedNCName ::= DESCENDANT (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= DESCENDANT (*) , {COLON }]
}

-------------------
lalr_state [157]: {
  [NCName ::= SELF (*) , {COLON }]
  [UnqualifiedNCName ::= SELF (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [158]: {
  [NCName ::= PRECEDING (*) , {COLON }]
  [UnqualifiedNCName ::= PRECEDING (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [159]: {
  [UnqualifiedNCName ::= ANCESTOR_OR_SELF (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ANCESTOR_OR_SELF (*) , {COLON }]
}

-------------------
lalr_state [160]: {
  [UnqualifiedNCName ::= ANCESTOR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ANCESTOR (*) , {COLON }]
}

-------------------
lalr_state [161]: {
  [NCName ::= ELEMENT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [162]: {
  [NCName ::= PARENT (*) , {COLON }]
  [UnqualifiedNCName ::= PARENT (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [163]: {
  [NCName ::= DOCUMENT_NODE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [164]: {
  [NCName ::= FOLLOWING (*) , {COLON }]
  [UnqualifiedNCName ::= FOLLOWING (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [165]: {
  [NCName ::= TEXT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [166]: {
  [NCName ::= ATTRIBUTE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [167]: {
  [NCName ::= NODE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COLON COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [168]: {
  [VarName ::= QName (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [169]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [StepExpr ::= (*) AxisStep , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {COMMA RETURN OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [SimpleForClause ::= SimpleForClause COMMA DOLLAR VarName IN (*) ExprSingle , {COMMA RETURN }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [OrExpr ::= (*) AndExpr , {COMMA RETURN OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [170]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [170]: {
  [SimpleForClause ::= SimpleForClause COMMA DOLLAR VarName IN ExprSingle (*) , {COMMA RETURN }]
}

-------------------
lalr_state [171]: {
  [UnqualifiedNCName ::= (*) TREAT , {IN }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {IN }]
  [UnqualifiedNCName ::= (*) CHILD , {IN }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {IN }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {IN }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {IN }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {IN }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {IN }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [QuantifiedExpr ::= SOME DOLLAR (*) QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CAST , {IN }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {IN }]
  [UnqualifiedNCName ::= (*) SELF , {IN }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {IN }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {IN }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {IN }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {IN }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {IN }]
  [NCName ::= (*) TEXT , {COLON }]
  [QuantifiedExprMiddle ::= (*) VarName IN ExprSingle , {COMMA SATISFIES }]
  [NCName ::= (*) TREAT , {COLON }]
  [VarName ::= (*) QName , {IN }]
  [UnqualifiedNCName ::= (*) OR , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {IN }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {IN }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {IN }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QuantifiedExprMiddle ::= (*) QuantifiedExprMiddle COMMA DOLLAR VarName IN ExprSingle , {COMMA SATISFIES }]
  [QName ::= (*) UnqualifiedLocalPart , {IN }]
  [UnqualifiedNCName ::= (*) DIV , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {IN }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {IN }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {IN }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {IN }]
  [UnqualifiedNCName ::= (*) IDIV , {IN }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {IN }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {IN }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {IN }]
  [UnqualifiedNCName ::= (*) NCNAME , {IN }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {IN }]
  [UnqualifiedNCName ::= (*) PARENT , {IN }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {IN }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {IN }]
  [UnqualifiedNCName ::= (*) TO , {IN }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {IN }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [168]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on VarName to state [173]
transition on Prefix to state [93]
transition on QuantifiedExprMiddle to state [172]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [172]: {
  [QuantifiedExpr ::= SOME DOLLAR QuantifiedExprMiddle (*) SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [QuantifiedExprMiddle ::= QuantifiedExprMiddle (*) COMMA DOLLAR VarName IN ExprSingle , {COMMA SATISFIES }]
}
transition on SATISFIES to state [177]
transition on COMMA to state [176]

-------------------
lalr_state [173]: {
  [QuantifiedExprMiddle ::= VarName (*) IN ExprSingle , {COMMA SATISFIES }]
}
transition on IN to state [174]

-------------------
lalr_state [174]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS SATISFIES TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS SATISFIES TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [QuantifiedExprMiddle ::= VarName IN (*) ExprSingle , {COMMA SATISFIES }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [StepExpr ::= (*) AxisStep , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS SATISFIES TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {COMMA SATISFIES OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS SATISFIES TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS SATISFIES TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [OrExpr ::= (*) AndExpr , {COMMA SATISFIES OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS SATISFIES TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [175]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [175]: {
  [QuantifiedExprMiddle ::= VarName IN ExprSingle (*) , {COMMA SATISFIES }]
}

-------------------
lalr_state [176]: {
  [QuantifiedExprMiddle ::= QuantifiedExprMiddle COMMA (*) DOLLAR VarName IN ExprSingle , {COMMA SATISFIES }]
}
transition on DOLLAR to state [179]

-------------------
lalr_state [177]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= SOME DOLLAR QuantifiedExprMiddle SATISFIES (*) ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) ForExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) IfExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) OrExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [178]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [178]: {
  [QuantifiedExpr ::= SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}

-------------------
lalr_state [179]: {
  [UnqualifiedNCName ::= (*) TREAT , {IN }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {IN }]
  [UnqualifiedNCName ::= (*) CHILD , {IN }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {IN }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {IN }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {IN }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {IN }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {IN }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {IN }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {IN }]
  [UnqualifiedNCName ::= (*) SELF , {IN }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {IN }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {IN }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {IN }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {IN }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {IN }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [VarName ::= (*) QName , {IN }]
  [UnqualifiedNCName ::= (*) OR , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {IN }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {IN }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [QuantifiedExprMiddle ::= QuantifiedExprMiddle COMMA DOLLAR (*) VarName IN ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) IN , {IN }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {IN }]
  [UnqualifiedNCName ::= (*) DIV , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {IN }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {IN }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {IN }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {IN }]
  [UnqualifiedNCName ::= (*) IDIV , {IN }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {IN }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {IN }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {IN }]
  [UnqualifiedNCName ::= (*) NCNAME , {IN }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {IN }]
  [UnqualifiedNCName ::= (*) PARENT , {IN }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {IN }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {IN }]
  [UnqualifiedNCName ::= (*) TO , {IN }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {IN }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [168]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on VarName to state [180]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [180]: {
  [QuantifiedExprMiddle ::= QuantifiedExprMiddle COMMA DOLLAR VarName (*) IN ExprSingle , {COMMA SATISFIES }]
}
transition on IN to state [181]

-------------------
lalr_state [181]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS SATISFIES TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS SATISFIES TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [StepExpr ::= (*) AxisStep , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS SATISFIES TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {COMMA SATISFIES OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS SATISFIES TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS SATISFIES TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [QuantifiedExprMiddle ::= QuantifiedExprMiddle COMMA DOLLAR VarName IN (*) ExprSingle , {COMMA SATISFIES }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {COMMA SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS SATISFIES TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS SATISFIES TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {COMMA SATISFIES }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [OrExpr ::= (*) AndExpr , {COMMA SATISFIES OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS SATISFIES AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS SATISFIES TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS SATISFIES TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [182]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [182]: {
  [QuantifiedExprMiddle ::= QuantifiedExprMiddle COMMA DOLLAR VarName IN ExprSingle (*) , {COMMA SATISFIES }]
}

-------------------
lalr_state [183]: {
  [ForwardAxis ::= DESCENDANT COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [184]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [Expr ::= (*) ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) AxisStep , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= IF LPAR (*) Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [Expr ::= (*) Expr COMMA ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on CASTABLE to state [89]
transition on MINUS to state [90]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [59]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on Expr to state [185]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [185]: {
  [IfExpr ::= IF LPAR Expr (*) RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [Expr ::= Expr (*) COMMA ExprSingle , {RPAR COMMA }]
}
transition on RPAR to state [186]
transition on COMMA to state [139]

-------------------
lalr_state [186]: {
  [IfExpr ::= IF LPAR Expr RPAR (*) THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}
transition on THEN to state [187]

-------------------
lalr_state [187]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO ELSE AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {ELSE }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO ELSE AND OR }]
  [ExprSingle ::= (*) ForExpr , {ELSE }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO ELSE AND OR }]
  [ExprSingle ::= (*) IfExpr , {ELSE }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [IfExpr ::= IF LPAR Expr RPAR THEN (*) ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {ELSE }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE IS ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO ELSE AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {ELSE }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {ELSE OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO ELSE AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {ELSE }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO ELSE AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {ELSE }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD IS TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO ELSE AND OR }]
  [ExprSingle ::= (*) OrExpr , {ELSE }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [OrExpr ::= (*) AndExpr , {ELSE OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE IS ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [188]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [188]: {
  [IfExpr ::= IF LPAR Expr RPAR THEN ExprSingle (*) ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}
transition on ELSE to state [189]

-------------------
lalr_state [189]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) ForExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) IfExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IfExpr ::= IF LPAR Expr RPAR THEN ExprSingle ELSE (*) ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) OrExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [190]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [190]: {
  [IfExpr ::= IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}

-------------------
lalr_state [191]: {
  [ForwardAxis ::= ATTRIBUTE COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [192]: {
  [UnqualifiedNCName ::= (*) TREAT , {RPAR COMMA }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CHILD , {RPAR COMMA }]
  [AttributeTest ::= ATTRIBUTE LPAR (*) AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {RPAR COMMA }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {RPAR COMMA }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {RPAR COMMA }]
  [AttributeTest ::= ATTRIBUTE LPAR (*) AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {RPAR COMMA }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {RPAR COMMA }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SELF , {RPAR COMMA }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [AttribNameOrWildcard ::= (*) AttributeName , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {RPAR COMMA }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {RPAR COMMA }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {RPAR COMMA }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [AttribNameOrWildcard ::= (*) STAR , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) UNION , {RPAR COMMA }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {RPAR COMMA }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [UnqualifiedNCName ::= (*) OR , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {RPAR COMMA }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {RPAR COMMA }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {RPAR COMMA }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) DIV , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {RPAR COMMA }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {RPAR COMMA }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [AttributeName ::= (*) QName , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {RPAR COMMA }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IDIV , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {RPAR COMMA }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {RPAR COMMA }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) NCNAME , {RPAR COMMA }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) PARENT , {RPAR COMMA }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {RPAR COMMA }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) TO , {RPAR COMMA }]
  [NCName ::= (*) FOR , {COLON }]
  [AttributeTest ::= ATTRIBUTE LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {RPAR COMMA }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [197]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on AttribNameOrWildcard to state [196]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on AttributeName to state [195]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on RPAR to state [194]
transition on IS to state [88]
transition on AND to state [120]
transition on PROCESSING_INSTRUCTION to state [152]
transition on STAR to state [193]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [193]: {
  [AttribNameOrWildcard ::= STAR (*) , {RPAR COMMA }]
}

-------------------
lalr_state [194]: {
  [AttributeTest ::= ATTRIBUTE LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [195]: {
  [AttribNameOrWildcard ::= AttributeName (*) , {RPAR COMMA }]
}

-------------------
lalr_state [196]: {
  [AttributeTest ::= ATTRIBUTE LPAR AttribNameOrWildcard (*) COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= ATTRIBUTE LPAR AttribNameOrWildcard (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [199]
transition on COMMA to state [198]

-------------------
lalr_state [197]: {
  [AttributeName ::= QName (*) , {RPAR COMMA }]
}

-------------------
lalr_state [198]: {
  [UnqualifiedNCName ::= (*) TREAT , {RPAR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {RPAR }]
  [UnqualifiedNCName ::= (*) CHILD , {RPAR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {RPAR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {RPAR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {RPAR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {RPAR }]
  [AttributeTest ::= ATTRIBUTE LPAR AttribNameOrWildcard COMMA (*) TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {RPAR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {RPAR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {RPAR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {RPAR }]
  [UnqualifiedNCName ::= (*) SELF , {RPAR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {RPAR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {RPAR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {RPAR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {RPAR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {RPAR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {RPAR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [UnqualifiedNCName ::= (*) OR , {RPAR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {RPAR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {RPAR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {RPAR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {RPAR }]
  [UnqualifiedNCName ::= (*) DIV , {RPAR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {RPAR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {RPAR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {RPAR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {RPAR }]
  [UnqualifiedNCName ::= (*) IDIV , {RPAR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {RPAR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {RPAR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {RPAR }]
  [UnqualifiedNCName ::= (*) NCNAME , {RPAR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {RPAR }]
  [UnqualifiedNCName ::= (*) PARENT , {RPAR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {RPAR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [TypeName ::= (*) QName , {RPAR }]
  [UnqualifiedNCName ::= (*) SOME , {RPAR }]
  [UnqualifiedNCName ::= (*) TO , {RPAR }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {RPAR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [201]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on TypeName to state [200]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [199]: {
  [AttributeTest ::= ATTRIBUTE LPAR AttribNameOrWildcard RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [200]: {
  [AttributeTest ::= ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [202]

-------------------
lalr_state [201]: {
  [TypeName ::= QName (*) , {RPAR QUESTIONMARK }]
}

-------------------
lalr_state [202]: {
  [AttributeTest ::= ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [203]: {
  [PITest ::= PROCESSING_INSTRUCTION LPAR (*) NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {RPAR }]
  [NCName ::= (*) DOCUMENT_NODE , {RPAR }]
  [NCName ::= (*) EVERY , {RPAR }]
  [NCName ::= (*) TREAT , {RPAR }]
  [NCName ::= (*) ANCESTOR , {RPAR }]
  [NCName ::= (*) CHILD , {RPAR }]
  [StringLiteral ::= (*) STRING , {RPAR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {RPAR }]
  [NCName ::= (*) OR , {RPAR }]
  [NCName ::= (*) IN , {RPAR }]
  [NCName ::= (*) INTERSECT , {RPAR }]
  [NCName ::= (*) FOLLOWING_SIBLING , {RPAR }]
  [PITest ::= PROCESSING_INSTRUCTION LPAR (*) StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {RPAR }]
  [NCName ::= (*) ELEMENT , {RPAR }]
  [NCName ::= (*) IF , {RPAR }]
  [NCName ::= (*) CASTABLE , {RPAR }]
  [NCName ::= (*) PRECEDING_SIBLING , {RPAR }]
  [NCName ::= (*) DESCENDANT , {RPAR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {RPAR }]
  [NCName ::= (*) DIV , {RPAR }]
  [NCName ::= (*) RETURN , {RPAR }]
  [NCName ::= (*) EXCEPT , {RPAR }]
  [NCName ::= (*) FOLLOWING , {RPAR }]
  [NCName ::= (*) EMPTY , {RPAR }]
  [NCName ::= (*) THEN , {RPAR }]
  [NCName ::= (*) CAST , {RPAR }]
  [NCName ::= (*) PRECEDING , {RPAR }]
  [NCName ::= (*) ATTRIBUTE , {RPAR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {RPAR }]
  [NCName ::= (*) IDIV , {RPAR }]
  [NCName ::= (*) SATISFIES , {RPAR }]
  [NCName ::= (*) INSTANCE , {RPAR }]
  [NCName ::= (*) NAMESPACE , {RPAR }]
  [NCName ::= (*) NCNAME , {RPAR }]
  [NCName ::= (*) ITEM , {RPAR }]
  [NCName ::= (*) ELSE , {RPAR }]
  [NCName ::= (*) IS , {RPAR }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {RPAR }]
  [NCName ::= (*) SELF , {RPAR }]
  [PITest ::= PROCESSING_INSTRUCTION LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {RPAR }]
  [NCName ::= (*) COMMENT , {RPAR }]
  [NCName ::= (*) SOME , {RPAR }]
  [NCName ::= (*) OF , {RPAR }]
  [NCName ::= (*) PARENT , {RPAR }]
  [NCName ::= (*) TO , {RPAR }]
  [NCName ::= (*) NODE , {RPAR }]
  [NCName ::= (*) AND , {RPAR }]
  [NCName ::= (*) FOR , {RPAR }]
  [NCName ::= (*) UNION , {RPAR }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {RPAR }]
}
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [242]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on STRING to state [116]
transition on FOLLOWING to state [241]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [240]
transition on THEN to state [239]
transition on INSTANCE to state [238]
transition on ELEMENT to state [161]
transition on CASTABLE to state [237]
transition on TO to state [236]
transition on EVERY to state [235]
transition on ELSE to state [234]
transition on UNION to state [233]
transition on ANCESTOR to state [232]
transition on ANCESTOR_OR_SELF to state [231]
transition on PRECEDING to state [230]
transition on MOD to state [229]
transition on TREAT to state [228]
transition on NCNAME to state [227]
transition on SELF to state [226]
transition on RETURN to state [225]
transition on SATISFIES to state [224]
transition on DESCENDANT to state [223]
transition on OF to state [222]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [221]
transition on TYPESWITCH to state [104]
transition on DIV to state [220]
transition on FOLLOWING_SIBLING to state [219]
transition on IDIV to state [218]
transition on OR to state [217]
transition on IN to state [216]
transition on SCHEMA_ELEMENT to state [153]
transition on RPAR to state [215]
transition on IS to state [214]
transition on AND to state [213]
transition on StringLiteral to state [212]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [211]
transition on FOR to state [210]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [209]
transition on EMPTY to state [52]
transition on NCName to state [208]
transition on SOME to state [207]
transition on PRECEDING_SIBLING to state [206]
transition on EXCEPT to state [205]
transition on CAST to state [204]

-------------------
lalr_state [204]: {
  [NCName ::= CAST (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [205]: {
  [NCName ::= EXCEPT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [206]: {
  [NCName ::= PRECEDING_SIBLING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [207]: {
  [NCName ::= SOME (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [208]: {
  [PITest ::= PROCESSING_INSTRUCTION LPAR NCName (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [244]

-------------------
lalr_state [209]: {
  [NCName ::= NAMESPACE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [210]: {
  [NCName ::= FOR (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [211]: {
  [NCName ::= CHILD (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [212]: {
  [PITest ::= PROCESSING_INSTRUCTION LPAR StringLiteral (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [243]

-------------------
lalr_state [213]: {
  [NCName ::= AND (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [214]: {
  [NCName ::= IS (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [215]: {
  [PITest ::= PROCESSING_INSTRUCTION LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [216]: {
  [NCName ::= IN (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [217]: {
  [NCName ::= OR (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [218]: {
  [NCName ::= IDIV (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [219]: {
  [NCName ::= FOLLOWING_SIBLING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [220]: {
  [NCName ::= DIV (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [221]: {
  [NCName ::= DESCENDANT_OR_SELF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [222]: {
  [NCName ::= OF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [223]: {
  [NCName ::= DESCENDANT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [224]: {
  [NCName ::= SATISFIES (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [225]: {
  [NCName ::= RETURN (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [226]: {
  [NCName ::= SELF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [227]: {
  [NCName ::= NCNAME (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [228]: {
  [NCName ::= TREAT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [229]: {
  [NCName ::= MOD (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [230]: {
  [NCName ::= PRECEDING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [231]: {
  [NCName ::= ANCESTOR_OR_SELF (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [232]: {
  [NCName ::= ANCESTOR (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [233]: {
  [NCName ::= UNION (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [234]: {
  [NCName ::= ELSE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [235]: {
  [NCName ::= EVERY (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [236]: {
  [NCName ::= TO (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [237]: {
  [NCName ::= CASTABLE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [238]: {
  [NCName ::= INSTANCE (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [239]: {
  [NCName ::= THEN (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [240]: {
  [NCName ::= PARENT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [241]: {
  [NCName ::= FOLLOWING (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [242]: {
  [NCName ::= INTERSECT (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [243]: {
  [PITest ::= PROCESSING_INSTRUCTION LPAR StringLiteral RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [244]: {
  [PITest ::= PROCESSING_INSTRUCTION LPAR NCName RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [245]: {
  [NCName ::= (*) TYPESWITCH , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [LocalPart ::= (*) NCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ATTRIBUTE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [QName ::= Prefix COLON (*) LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on ITEM to state [84]
transition on INTERSECT to state [242]
transition on TEXT to state [165]
transition on FOLLOWING to state [241]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [240]
transition on THEN to state [239]
transition on INSTANCE to state [238]
transition on ELEMENT to state [161]
transition on CASTABLE to state [237]
transition on TO to state [236]
transition on EVERY to state [235]
transition on ELSE to state [234]
transition on UNION to state [233]
transition on ANCESTOR to state [232]
transition on ANCESTOR_OR_SELF to state [231]
transition on PRECEDING to state [230]
transition on MOD to state [229]
transition on TREAT to state [228]
transition on NCNAME to state [227]
transition on SELF to state [226]
transition on RETURN to state [225]
transition on SATISFIES to state [224]
transition on DESCENDANT to state [223]
transition on OF to state [222]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [221]
transition on TYPESWITCH to state [104]
transition on DIV to state [220]
transition on FOLLOWING_SIBLING to state [219]
transition on IDIV to state [218]
transition on OR to state [217]
transition on IN to state [216]
transition on SCHEMA_ELEMENT to state [153]
transition on IS to state [214]
transition on AND to state [213]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [211]
transition on FOR to state [210]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [209]
transition on EMPTY to state [52]
transition on NCName to state [247]
transition on SOME to state [207]
transition on PRECEDING_SIBLING to state [206]
transition on EXCEPT to state [205]
transition on CAST to state [204]
transition on LocalPart to state [246]

-------------------
lalr_state [246]: {
  [QName ::= Prefix COLON LocalPart (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [247]: {
  [LocalPart ::= NCName (*) , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS IN RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [248]: {
  [UnaryExpr ::= MINUS UnaryExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [249]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= RelativePathExpr FORWARD_SLASH (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [252]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on IF to state [129]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on IS to state [88]
transition on CASTABLE to state [89]
transition on SchemaAttributeTest to state [87]
transition on ITEM to state [84]
transition on COMMENT to state [82]
transition on NCNAME to state [83]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [250]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= RelativePathExpr FORWARD_SLASHSLASH (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [251]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on IF to state [129]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on IS to state [88]
transition on CASTABLE to state [89]
transition on SchemaAttributeTest to state [87]
transition on ITEM to state [84]
transition on COMMENT to state [82]
transition on NCNAME to state [83]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [251]: {
  [RelativePathExpr ::= RelativePathExpr FORWARD_SLASHSLASH StepExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [252]: {
  [RelativePathExpr ::= RelativePathExpr FORWARD_SLASH StepExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [253]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr STAR (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [264]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [254]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr MOD (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [263]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [255]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [MultiplicativeExpr ::= MultiplicativeExpr DIV (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [262]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [256]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [MultiplicativeExpr ::= MultiplicativeExpr IDIV (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [257]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [257]: {
  [MultiplicativeExpr ::= MultiplicativeExpr IDIV UnionExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr (*) UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr (*) PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PIPE to state [259]
transition on UNION to state [258]

-------------------
lalr_state [258]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr UNION (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [261]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [259]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr PIPE (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [260]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [260]: {
  [IntersectExceptExpr ::= IntersectExceptExpr (*) INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr PIPE IntersectExceptExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= IntersectExceptExpr (*) EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on INTERSECT to state [132]
transition on EXCEPT to state [131]

-------------------
lalr_state [261]: {
  [IntersectExceptExpr ::= IntersectExceptExpr (*) INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= IntersectExceptExpr (*) EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr UNION IntersectExceptExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on INTERSECT to state [132]
transition on EXCEPT to state [131]

-------------------
lalr_state [262]: {
  [UnionExpr ::= UnionExpr (*) UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr DIV UnionExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr (*) PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PIPE to state [259]
transition on UNION to state [258]

-------------------
lalr_state [263]: {
  [UnionExpr ::= UnionExpr (*) UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr MOD UnionExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr (*) PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PIPE to state [259]
transition on UNION to state [258]

-------------------
lalr_state [264]: {
  [UnionExpr ::= UnionExpr (*) UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr STAR UnionExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= UnionExpr (*) PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on PIPE to state [259]
transition on UNION to state [258]

-------------------
lalr_state [265]: {
  [CommentTest ::= COMMENT LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [266]

-------------------
lalr_state [266]: {
  [CommentTest ::= COMMENT LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [267]: {
  [ReverseAxis ::= PRECEDING_SIBLING COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [268]: {
  [NCName ::= (*) TYPESWITCH , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CHILD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ATTRIBUTE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Wildcard ::= STAR COLON (*) NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PARENT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TO , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on ITEM to state [84]
transition on INTERSECT to state [242]
transition on TEXT to state [165]
transition on FOLLOWING to state [241]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [240]
transition on THEN to state [239]
transition on INSTANCE to state [238]
transition on ELEMENT to state [161]
transition on CASTABLE to state [237]
transition on TO to state [236]
transition on EVERY to state [235]
transition on ELSE to state [234]
transition on UNION to state [233]
transition on ANCESTOR to state [232]
transition on ANCESTOR_OR_SELF to state [231]
transition on PRECEDING to state [230]
transition on MOD to state [229]
transition on TREAT to state [228]
transition on NCNAME to state [227]
transition on SELF to state [226]
transition on RETURN to state [225]
transition on SATISFIES to state [224]
transition on DESCENDANT to state [223]
transition on OF to state [222]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [221]
transition on TYPESWITCH to state [104]
transition on DIV to state [220]
transition on FOLLOWING_SIBLING to state [219]
transition on IDIV to state [218]
transition on OR to state [217]
transition on IN to state [216]
transition on SCHEMA_ELEMENT to state [153]
transition on IS to state [214]
transition on AND to state [213]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [211]
transition on FOR to state [210]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [209]
transition on EMPTY to state [52]
transition on NCName to state [269]
transition on SOME to state [207]
transition on PRECEDING_SIBLING to state [206]
transition on EXCEPT to state [205]
transition on CAST to state [204]

-------------------
lalr_state [269]: {
  [Wildcard ::= STAR COLON NCName (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [270]: {
  [UnqualifiedNCName ::= (*) TREAT , {IN }]
  [SimpleForClause ::= FOR DOLLAR (*) VarName IN ExprSingle , {COMMA RETURN }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {IN }]
  [UnqualifiedNCName ::= (*) CHILD , {IN }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {IN }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {IN }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {IN }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {IN }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {IN }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {IN }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {IN }]
  [UnqualifiedNCName ::= (*) SELF , {IN }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {IN }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {IN }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {IN }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {IN }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {IN }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [VarName ::= (*) QName , {IN }]
  [UnqualifiedNCName ::= (*) OR , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {IN }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {IN }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {IN }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {IN }]
  [UnqualifiedNCName ::= (*) DIV , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {IN }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {IN }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {IN }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {IN }]
  [UnqualifiedNCName ::= (*) IDIV , {IN }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {IN }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {IN }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {IN }]
  [UnqualifiedNCName ::= (*) NCNAME , {IN }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {IN }]
  [UnqualifiedNCName ::= (*) PARENT , {IN }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {IN }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {IN }]
  [UnqualifiedNCName ::= (*) TO , {IN }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {IN }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [168]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on VarName to state [271]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [271]: {
  [SimpleForClause ::= FOR DOLLAR VarName (*) IN ExprSingle , {COMMA RETURN }]
}
transition on IN to state [272]

-------------------
lalr_state [272]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [SimpleForClause ::= FOR DOLLAR VarName IN (*) ExprSingle , {COMMA RETURN }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [StepExpr ::= (*) AxisStep , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {COMMA RETURN OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {COMMA RETURN AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [OrExpr ::= (*) AndExpr , {COMMA RETURN OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [273]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [273]: {
  [SimpleForClause ::= FOR DOLLAR VarName IN ExprSingle (*) , {COMMA RETURN }]
}

-------------------
lalr_state [274]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [FunctionCall ::= QName LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCallMiddle ::= (*) ExprSingle , {RPAR COMMA }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) AxisStep , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [FunctionCall ::= QName LPAR (*) FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [FunctionCallMiddle ::= (*) FunctionCallMiddle COMMA ExprSingle , {RPAR COMMA }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on CASTABLE to state [89]
transition on MINUS to state [90]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on RPAR to state [277]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [276]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on FunctionCallMiddle to state [275]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [275]: {
  [FunctionCallMiddle ::= FunctionCallMiddle (*) COMMA ExprSingle , {RPAR COMMA }]
  [FunctionCall ::= QName LPAR FunctionCallMiddle (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [279]
transition on COMMA to state [278]

-------------------
lalr_state [276]: {
  [FunctionCallMiddle ::= ExprSingle (*) , {RPAR COMMA }]
}

-------------------
lalr_state [277]: {
  [FunctionCall ::= QName LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [278]: {
  [UnqualifiedNCName ::= (*) UNION , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) TextTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) OR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) NumericLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) RETURN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) ForExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) OF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) Literal , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) AxisStep , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) IfExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CASTABLE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) THEN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NameTest ::= (*) Wildcard , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [TreatExpr ::= (*) CastableExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS TO AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IS , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) AND , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) AnyKindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [CastableExpr ::= (*) CastExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS TO AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ContextItemExpr ::= (*) DOT , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS TO AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [Literal ::= (*) StringLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS TO AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) TO , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NodeTest ::= (*) KindTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) SchemaElementTest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) TREAT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [FunctionCallMiddle ::= FunctionCallMiddle COMMA (*) ExprSingle , {RPAR COMMA }]
  [ReverseStep ::= (*) AbbrevReverseStep , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {RPAR COMMA AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS TO AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [KindTest ::= (*) PITest , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PrimaryExpr ::= (*) VarRef , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [StepExpr ::= (*) FilterExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS TO AND OR }]
  [ExprSingle ::= (*) OrExpr , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [OrExpr ::= (*) AndExpr , {RPAR COMMA OR }]
  [UnqualifiedNCName ::= (*) ELSE , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {LBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {LBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS TO AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS TO AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [280]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [279]: {
  [FunctionCall ::= QName LPAR FunctionCallMiddle RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [280]: {
  [FunctionCallMiddle ::= FunctionCallMiddle COMMA ExprSingle (*) , {RPAR COMMA }]
}

-------------------
lalr_state [281]: {
  [ParenthesizedExpr ::= LPAR Expr (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Expr ::= Expr (*) COMMA ExprSingle , {RPAR COMMA }]
}
transition on RPAR to state [283]
transition on COMMA to state [139]

-------------------
lalr_state [282]: {
  [ParenthesizedExpr ::= LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [283]: {
  [ParenthesizedExpr ::= LPAR Expr RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [284]: {
  [Predicate ::= (*) LBRACKET Expr RBRACKET , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= ForwardStep PredicateList (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= PredicateList (*) Predicate , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LBRACKET to state [137]
transition on Predicate to state [136]

-------------------
lalr_state [285]: {
  [UnaryExpr ::= PLUS UnaryExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [286]: {
  [VarRef ::= DOLLAR VarName (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [287]: {
  [AbbrevForwardStep ::= AT_SYM NodeTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [288]: {
  [AttributeTest ::= ATTRIBUTE (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= ATTRIBUTE (*) LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= ATTRIBUTE (*) , {COLON }]
  [AttributeTest ::= ATTRIBUTE (*) LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [192]

-------------------
lalr_state [289]: {
  [NameTest ::= QName (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [290]: {
  [ReverseAxis ::= PRECEDING COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [291]: {
  [NodeComp ::= IS (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [292]: {
  [ValueComp ::= LT (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [293]: {
  [ValueComp ::= NE (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [294]: {
  [NodeComp ::= GREATER_GREATER (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [295]: {
  [GeneralComp ::= GREATER (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [296]: {
  [ValueComp ::= GT (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [297]: {
  [GeneralComp ::= LESSEQUAL (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [298]: {
  [ValueComp ::= LE (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [299]: {
  [GeneralComp ::= EQUALS (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [300]: {
  [GeneralComp ::= NOTEQUALS (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [301]: {
  [GeneralComp ::= LESSTHAN (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [302]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= RangeExpr ValueComp (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on RangeExpr to state [311]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [303]: {
  [ValueComp ::= GE (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [304]: {
  [ValueComp ::= EQ (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [305]: {
  [NodeComp ::= LESS_LESS (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [306]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= RangeExpr GeneralComp (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on RangeExpr to state [310]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [307]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS COMMA RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ComparisonExpr ::= RangeExpr NodeComp (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR COMMA DIV IDIV MOD RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE FORWARD_SLASH FORWARD_SLASHSLASH COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE COMMA DIV IDIV MOD UNION RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on RangeExpr to state [309]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [308]: {
  [GeneralComp ::= GREATEREQUAL (*) , {LPAR PLUS MINUS STAR FORWARD_SLASH FORWARD_SLASHSLASH AT_SYM DOTDOT DOLLAR DOT CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH INTEGER DOUBLE DECIMAL STRING NCNAME }]
}

-------------------
lalr_state [309]: {
  [ComparisonExpr ::= RangeExpr NodeComp RangeExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}

-------------------
lalr_state [310]: {
  [ComparisonExpr ::= RangeExpr GeneralComp RangeExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}

-------------------
lalr_state [311]: {
  [ComparisonExpr ::= RangeExpr ValueComp RangeExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}

-------------------
lalr_state [312]: {
  [ReverseAxis ::= ANCESTOR_OR_SELF COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [313]: {
  [TreatExpr ::= CastableExpr TREAT (*) AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on AS to state [314]

-------------------
lalr_state [314]: {
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) ElementTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [KindTest ::= (*) SchemaElementTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [ItemType ::= (*) AtomicType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) UNION , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [ItemType ::= (*) KindTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [ItemType ::= (*) ITEM LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [KindTest ::= (*) TextTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= (*) ItemType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [AtomicType ::= (*) QName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [KindTest ::= (*) AnyKindTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= (*) ItemType OccurrenceIndicator , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) DocumentTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= CastableExpr TREAT AS (*) SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= (*) EMPTY LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [321]
transition on SchemaElementTest to state [79]
transition on NODE to state [17]
transition on ATTRIBUTE to state [288]
transition on INTERSECT to state [81]
transition on ITEM to state [320]
transition on TEXT to state [37]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [162]
transition on AtomicType to state [319]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [38]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on SequenceType to state [318]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on CommentTest to state [19]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on KindTest to state [317]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on DESCENDANT to state [156]
transition on OF to state [106]
transition on ElementTest to state [67]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on DocumentTest to state [18]
transition on OR to state [96]
transition on IN to state [95]
transition on PITest to state [58]
transition on AnyKindTest to state [112]
transition on UnqualifiedNCName to state [72]
transition on AttributeTest to state [80]
transition on SCHEMA_ELEMENT to state [42]
transition on IS to state [88]
transition on AND to state [120]
transition on PROCESSING_INSTRUCTION to state [94]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on ItemType to state [316]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on COMMENT to state [82]
transition on NAMESPACE to state [147]
transition on EMPTY to state [315]
transition on NCName to state [31]
transition on SchemaAttributeTest to state [87]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on TextTest to state [103]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [315]: {
  [NCName ::= EMPTY (*) , {COLON }]
  [SequenceType ::= EMPTY (*) LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [328]

-------------------
lalr_state [316]: {
  [OccurrenceIndicator ::= (*) QUESTIONMARK , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= ItemType (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [OccurrenceIndicator ::= (*) PLUS , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [OccurrenceIndicator ::= (*) STAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= ItemType (*) OccurrenceIndicator , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on QUESTIONMARK to state [327]
transition on PLUS to state [326]
transition on OccurrenceIndicator to state [325]
transition on STAR to state [324]

-------------------
lalr_state [317]: {
  [ItemType ::= KindTest (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [318]: {
  [TreatExpr ::= CastableExpr TREAT AS SequenceType (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [319]: {
  [ItemType ::= AtomicType (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [320]: {
  [NCName ::= ITEM (*) , {COLON }]
  [ItemType ::= ITEM (*) LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LPAR to state [322]

-------------------
lalr_state [321]: {
  [AtomicType ::= QName (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [322]: {
  [ItemType ::= ITEM LPAR (*) RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [323]

-------------------
lalr_state [323]: {
  [ItemType ::= ITEM LPAR RPAR (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [324]: {
  [OccurrenceIndicator ::= STAR (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [325]: {
  [SequenceType ::= ItemType OccurrenceIndicator (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [326]: {
  [OccurrenceIndicator ::= PLUS (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [327]: {
  [OccurrenceIndicator ::= QUESTIONMARK (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [328]: {
  [SequenceType ::= EMPTY LPAR (*) RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [329]

-------------------
lalr_state [329]: {
  [SequenceType ::= EMPTY LPAR RPAR (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [330]: {
  [UnqualifiedNCName ::= (*) TREAT , {RPAR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {RPAR }]
  [UnqualifiedNCName ::= (*) CHILD , {RPAR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {RPAR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {RPAR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {RPAR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {RPAR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {RPAR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {RPAR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {RPAR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {RPAR }]
  [UnqualifiedNCName ::= (*) SELF , {RPAR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {RPAR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {RPAR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {RPAR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {RPAR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {RPAR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {RPAR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [UnqualifiedNCName ::= (*) OR , {RPAR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {RPAR }]
  [SchemaAttributeTest ::= SCHEMA_ATTRIBUTE LPAR (*) AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {RPAR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {RPAR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {RPAR }]
  [UnqualifiedNCName ::= (*) DIV , {RPAR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {RPAR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [AttributeDeclaration ::= (*) AttributeName , {RPAR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {RPAR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [AttributeName ::= (*) QName , {RPAR }]
  [UnqualifiedNCName ::= (*) RETURN , {RPAR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {RPAR }]
  [UnqualifiedNCName ::= (*) IDIV , {RPAR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {RPAR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {RPAR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {RPAR }]
  [UnqualifiedNCName ::= (*) NCNAME , {RPAR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {RPAR }]
  [UnqualifiedNCName ::= (*) PARENT , {RPAR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {RPAR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {RPAR }]
  [UnqualifiedNCName ::= (*) TO , {RPAR }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {RPAR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [197]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on AttributeName to state [332]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on AttributeDeclaration to state [331]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [331]: {
  [SchemaAttributeTest ::= SCHEMA_ATTRIBUTE LPAR AttributeDeclaration (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [333]

-------------------
lalr_state [332]: {
  [AttributeDeclaration ::= AttributeName (*) , {RPAR }]
}

-------------------
lalr_state [333]: {
  [SchemaAttributeTest ::= SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [334]: {
  [UnqualifiedNCName ::= (*) TREAT , {RPAR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {RPAR }]
  [UnqualifiedNCName ::= (*) CHILD , {RPAR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {RPAR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {RPAR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {RPAR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {RPAR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {RPAR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {RPAR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {RPAR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {RPAR }]
  [UnqualifiedNCName ::= (*) SELF , {RPAR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {RPAR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {RPAR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {RPAR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {RPAR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {RPAR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [SchemaElementTest ::= SCHEMA_ELEMENT LPAR (*) ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {RPAR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [UnqualifiedNCName ::= (*) OR , {RPAR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {RPAR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {RPAR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ElementDeclaration ::= (*) ElementName , {RPAR }]
  [UnqualifiedNCName ::= (*) IN , {RPAR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {RPAR }]
  [UnqualifiedNCName ::= (*) DIV , {RPAR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {RPAR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {RPAR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {RPAR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {RPAR }]
  [UnqualifiedNCName ::= (*) IDIV , {RPAR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {RPAR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {RPAR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementName ::= (*) QName , {RPAR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {RPAR }]
  [UnqualifiedNCName ::= (*) NCNAME , {RPAR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {RPAR }]
  [UnqualifiedNCName ::= (*) PARENT , {RPAR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {RPAR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {RPAR }]
  [UnqualifiedNCName ::= (*) TO , {RPAR }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {RPAR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [337]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on ElementName to state [336]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on ElementDeclaration to state [335]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [335]: {
  [SchemaElementTest ::= SCHEMA_ELEMENT LPAR ElementDeclaration (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [338]

-------------------
lalr_state [336]: {
  [ElementDeclaration ::= ElementName (*) , {RPAR }]
}

-------------------
lalr_state [337]: {
  [ElementName ::= QName (*) , {RPAR COMMA }]
}

-------------------
lalr_state [338]: {
  [SchemaElementTest ::= SCHEMA_ELEMENT LPAR ElementDeclaration RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [339]: {
  [Predicate ::= (*) LBRACKET Expr RBRACKET , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PredicateList ::= PredicateList (*) Predicate , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= ReverseStep PredicateList (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on LBRACKET to state [137]
transition on Predicate to state [136]

-------------------
lalr_state [340]: {
  [UnqualifiedNCName ::= (*) TREAT , {RPAR COMMA }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CHILD , {RPAR COMMA }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {RPAR COMMA }]
  [ElementTest ::= ELEMENT LPAR (*) ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {RPAR COMMA }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {RPAR COMMA }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {RPAR COMMA }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ElementNameOrWildcard ::= (*) ElementName , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) CAST , {RPAR COMMA }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SELF , {RPAR COMMA }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {RPAR COMMA }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ElementNameOrWildcard ::= (*) STAR , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IS , {RPAR COMMA }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {RPAR COMMA }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {RPAR COMMA }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {RPAR COMMA }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [UnqualifiedNCName ::= (*) OR , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {RPAR COMMA }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {RPAR COMMA }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {RPAR COMMA }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) DIV , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {RPAR COMMA }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {RPAR COMMA }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {RPAR COMMA }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) IDIV , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {RPAR COMMA }]
  [NCName ::= (*) THEN , {COLON }]
  [ElementTest ::= ELEMENT LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {RPAR COMMA }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementName ::= (*) QName , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) SATISFIES , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) NCNAME , {RPAR COMMA }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) PARENT , {RPAR COMMA }]
  [NCName ::= (*) ELSE , {COLON }]
  [ElementTest ::= ELEMENT LPAR (*) ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {RPAR COMMA }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {RPAR COMMA }]
  [UnqualifiedNCName ::= (*) TO , {RPAR COMMA }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {RPAR COMMA }]
  [NCName ::= (*) AND , {COLON }]
  [ElementTest ::= ELEMENT LPAR (*) ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [337]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on ElementName to state [344]
transition on NCNAME to state [83]
transition on ElementNameOrWildcard to state [343]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on DESCENDANT to state [156]
transition on OF to state [106]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on RPAR to state [342]
transition on IS to state [88]
transition on AND to state [120]
transition on PROCESSING_INSTRUCTION to state [152]
transition on STAR to state [341]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [341]: {
  [ElementNameOrWildcard ::= STAR (*) , {RPAR COMMA }]
}

-------------------
lalr_state [342]: {
  [ElementTest ::= ELEMENT LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [343]: {
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard (*) COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard (*) COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [346]
transition on COMMA to state [345]

-------------------
lalr_state [344]: {
  [ElementNameOrWildcard ::= ElementName (*) , {RPAR COMMA }]
}

-------------------
lalr_state [345]: {
  [UnqualifiedNCName ::= (*) TREAT , {RPAR QUESTIONMARK }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) CHILD , {RPAR QUESTIONMARK }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {RPAR QUESTIONMARK }]
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard COMMA (*) TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {RPAR QUESTIONMARK }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {RPAR QUESTIONMARK }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {RPAR QUESTIONMARK }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {RPAR QUESTIONMARK }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {RPAR QUESTIONMARK }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) SELF , {RPAR QUESTIONMARK }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {RPAR QUESTIONMARK }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {RPAR QUESTIONMARK }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {RPAR QUESTIONMARK }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {RPAR QUESTIONMARK }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {RPAR QUESTIONMARK }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [UnqualifiedNCName ::= (*) OR , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {RPAR QUESTIONMARK }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {RPAR QUESTIONMARK }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {RPAR QUESTIONMARK }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) DIV , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {RPAR QUESTIONMARK }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {RPAR QUESTIONMARK }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {RPAR QUESTIONMARK }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) IDIV , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {RPAR QUESTIONMARK }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {RPAR QUESTIONMARK }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) NCNAME , {RPAR QUESTIONMARK }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) PARENT , {RPAR QUESTIONMARK }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {RPAR QUESTIONMARK }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [TypeName ::= (*) QName , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) SOME , {RPAR QUESTIONMARK }]
  [UnqualifiedNCName ::= (*) TO , {RPAR QUESTIONMARK }]
  [NCName ::= (*) FOR , {COLON }]
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard COMMA (*) TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {RPAR QUESTIONMARK }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [201]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on TypeName to state [347]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [346]: {
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [347]: {
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard COMMA TypeName (*) QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard COMMA TypeName (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [349]
transition on QUESTIONMARK to state [348]

-------------------
lalr_state [348]: {
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [350]

-------------------
lalr_state [349]: {
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [350]: {
  [ElementTest ::= ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [351]: {
  [TextTest ::= TEXT LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [352]

-------------------
lalr_state [352]: {
  [TextTest ::= TEXT LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [353]: {
  [ForwardAxis ::= SELF COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [354]: {
  [UnqualifiedNCName ::= (*) TREAT , {IN }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {IN }]
  [UnqualifiedNCName ::= (*) CHILD , {IN }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {IN }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {IN }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {IN }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {IN }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {IN }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {IN }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {IN }]
  [UnqualifiedNCName ::= (*) SELF , {IN }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {IN }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [QuantifiedExpr ::= EVERY DOLLAR (*) QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) IS , {IN }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {IN }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {IN }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {IN }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {IN }]
  [NCName ::= (*) TEXT , {COLON }]
  [QuantifiedExprMiddle ::= (*) VarName IN ExprSingle , {COMMA SATISFIES }]
  [NCName ::= (*) TREAT , {COLON }]
  [VarName ::= (*) QName , {IN }]
  [UnqualifiedNCName ::= (*) OR , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {IN }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {IN }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {IN }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QuantifiedExprMiddle ::= (*) QuantifiedExprMiddle COMMA DOLLAR VarName IN ExprSingle , {COMMA SATISFIES }]
  [QName ::= (*) UnqualifiedLocalPart , {IN }]
  [UnqualifiedNCName ::= (*) DIV , {IN }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {IN }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {IN }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {IN }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {IN }]
  [UnqualifiedNCName ::= (*) IDIV , {IN }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {IN }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [UnqualifiedNCName ::= (*) INSTANCE , {IN }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {IN }]
  [UnqualifiedNCName ::= (*) NCNAME , {IN }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {IN }]
  [UnqualifiedNCName ::= (*) PARENT , {IN }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {IN }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {IN }]
  [UnqualifiedNCName ::= (*) TO , {IN }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {IN }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [168]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on VarName to state [173]
transition on Prefix to state [93]
transition on QuantifiedExprMiddle to state [355]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [355]: {
  [QuantifiedExpr ::= EVERY DOLLAR QuantifiedExprMiddle (*) SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [QuantifiedExprMiddle ::= QuantifiedExprMiddle (*) COMMA DOLLAR VarName IN ExprSingle , {COMMA SATISFIES }]
}
transition on SATISFIES to state [356]
transition on COMMA to state [176]

-------------------
lalr_state [356]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) FOR DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) SOME DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) ForExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) IfExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IfExpr ::= (*) IF LPAR Expr RPAR THEN ExprSingle ELSE ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [ForExpr ::= (*) SimpleForClause RETURN ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) OrExpr OR AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [SimpleForClause ::= (*) SimpleForClause COMMA DOLLAR VarName IN ExprSingle , {COMMA RETURN }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= EVERY DOLLAR QuantifiedExprMiddle SATISFIES (*) ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [QuantifiedExpr ::= (*) EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) QuantifiedExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ExprSingle ::= (*) OrExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= (*) AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [123]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SimpleForClause to state [109]
transition on SOME to state [108]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [100]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on ForExpr to state [76]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [68]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on ExprSingle to state [357]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on IfExpr to state [50]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [34]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on QuantifiedExpr to state [27]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on OrExpr to state [4]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [357]: {
  [QuantifiedExpr ::= EVERY DOLLAR QuantifiedExprMiddle SATISFIES ExprSingle (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE }]
}

-------------------
lalr_state [358]: {
  [ForwardAxis ::= FOLLOWING_SIBLING COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [359]: {
  [ForwardAxis ::= CHILD COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [360]: {
  [CastableExpr ::= CastExpr CASTABLE (*) AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on AS to state [361]

-------------------
lalr_state [361]: {
  [UnqualifiedNCName ::= (*) TREAT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [CastableExpr ::= CastExpr CASTABLE AS (*) SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [UnqualifiedNCName ::= (*) AND , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [SingleType ::= (*) AtomicType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [SingleType ::= (*) AtomicType QUESTIONMARK , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [AtomicType ::= (*) QName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [321]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on AtomicType to state [363]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on SingleType to state [362]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [362]: {
  [CastableExpr ::= CastExpr CASTABLE AS SingleType (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [363]: {
  [SingleType ::= AtomicType (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [SingleType ::= AtomicType (*) QUESTIONMARK , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on QUESTIONMARK to state [364]

-------------------
lalr_state [364]: {
  [SingleType ::= AtomicType QUESTIONMARK (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [365]: {
  [ForwardStep ::= ForwardAxis NodeTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [366]: {
  [ReverseAxis ::= ANCESTOR COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [367]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= AdditiveExpr TO (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [372]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [368]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= AdditiveExpr PLUS (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [371]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [369]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= AdditiveExpr MINUS (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [370]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [370]: {
  [MultiplicativeExpr ::= MultiplicativeExpr (*) IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr (*) , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on IDIV to state [256]
transition on DIV to state [255]
transition on MOD to state [254]
transition on STAR to state [253]

-------------------
lalr_state [371]: {
  [MultiplicativeExpr ::= MultiplicativeExpr (*) IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr (*) , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= MultiplicativeExpr (*) STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on IDIV to state [256]
transition on DIV to state [255]
transition on MOD to state [254]
transition on STAR to state [253]

-------------------
lalr_state [372]: {
  [AdditiveExpr ::= AdditiveExpr (*) PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [RangeExpr ::= AdditiveExpr TO AdditiveExpr (*) , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [AdditiveExpr ::= AdditiveExpr (*) MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
}
transition on MINUS to state [369]
transition on PLUS to state [368]

-------------------
lalr_state [373]: {
  [AnyKindTest ::= NODE LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [374]

-------------------
lalr_state [374]: {
  [AnyKindTest ::= NODE LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [375]: {
  [PathExpr ::= FORWARD_SLASH RelativePathExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= RelativePathExpr (*) FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= RelativePathExpr (*) FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on FORWARD_SLASHSLASH to state [250]
transition on FORWARD_SLASH to state [249]

-------------------
lalr_state [376]: {
  [ForwardAxis ::= NAMESPACE COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [377]: {
  [DocumentTest ::= DOCUMENT_NODE LPAR (*) SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {RPAR }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {RPAR }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {RPAR }]
  [DocumentTest ::= DOCUMENT_NODE LPAR (*) ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {RPAR }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {RPAR }]
  [DocumentTest ::= DOCUMENT_NODE LPAR (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on ELEMENT to state [382]
transition on RPAR to state [381]
transition on SCHEMA_ELEMENT to state [380]
transition on SchemaElementTest to state [379]
transition on ElementTest to state [378]

-------------------
lalr_state [378]: {
  [DocumentTest ::= DOCUMENT_NODE LPAR ElementTest (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [384]

-------------------
lalr_state [379]: {
  [DocumentTest ::= DOCUMENT_NODE LPAR SchemaElementTest (*) RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on RPAR to state [383]

-------------------
lalr_state [380]: {
  [SchemaElementTest ::= SCHEMA_ELEMENT (*) LPAR ElementDeclaration RPAR , {RPAR }]
}
transition on LPAR to state [334]

-------------------
lalr_state [381]: {
  [DocumentTest ::= DOCUMENT_NODE LPAR RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [382]: {
  [ElementTest ::= ELEMENT (*) LPAR ElementNameOrWildcard RPAR , {RPAR }]
  [ElementTest ::= ELEMENT (*) LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {RPAR }]
  [ElementTest ::= ELEMENT (*) LPAR RPAR , {RPAR }]
  [ElementTest ::= ELEMENT (*) LPAR ElementNameOrWildcard COMMA TypeName RPAR , {RPAR }]
}
transition on LPAR to state [340]

-------------------
lalr_state [383]: {
  [DocumentTest ::= DOCUMENT_NODE LPAR SchemaElementTest RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [384]: {
  [DocumentTest ::= DOCUMENT_NODE LPAR ElementTest RPAR (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [385]: {
  [InstanceofExpr ::= TreatExpr INSTANCE (*) OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on OF to state [386]

-------------------
lalr_state [386]: {
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) ElementTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [KindTest ::= (*) SchemaElementTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [ItemType ::= (*) AtomicType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) UNION , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [ItemType ::= (*) KindTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [ItemType ::= (*) ITEM LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [KindTest ::= (*) TextTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= TreatExpr INSTANCE OF (*) SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= (*) ItemType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [AtomicType ::= (*) QName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [KindTest ::= (*) AnyKindTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= (*) ItemType OccurrenceIndicator , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) DocumentTest , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [SequenceType ::= (*) EMPTY LPAR RPAR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [321]
transition on SchemaElementTest to state [79]
transition on NODE to state [17]
transition on ATTRIBUTE to state [288]
transition on INTERSECT to state [81]
transition on ITEM to state [320]
transition on TEXT to state [37]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [11]
transition on PARENT to state [162]
transition on AtomicType to state [319]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on ELEMENT to state [38]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on SequenceType to state [387]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on CommentTest to state [19]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on KindTest to state [317]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on DESCENDANT to state [156]
transition on OF to state [106]
transition on ElementTest to state [67]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on DocumentTest to state [18]
transition on OR to state [96]
transition on IN to state [95]
transition on PITest to state [58]
transition on AnyKindTest to state [112]
transition on UnqualifiedNCName to state [72]
transition on AttributeTest to state [80]
transition on SCHEMA_ELEMENT to state [42]
transition on IS to state [88]
transition on AND to state [120]
transition on PROCESSING_INSTRUCTION to state [94]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on ItemType to state [316]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on COMMENT to state [82]
transition on NAMESPACE to state [147]
transition on EMPTY to state [315]
transition on NCName to state [31]
transition on SchemaAttributeTest to state [87]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on TextTest to state [103]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [387]: {
  [InstanceofExpr ::= TreatExpr INSTANCE OF SequenceType (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [388]: {
  [CastExpr ::= UnaryExpr CAST (*) AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on AS to state [389]

-------------------
lalr_state [389]: {
  [UnqualifiedNCName ::= (*) TREAT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [UnqualifiedNCName ::= (*) THEN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [UnqualifiedNCName ::= (*) CAST , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [UnqualifiedNCName ::= (*) IS , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) OF , {COLON }]
  [CastExpr ::= UnaryExpr CAST AS (*) SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [UnqualifiedNCName ::= (*) UNION , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [UnqualifiedNCName ::= (*) FOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) TREAT , {COLON }]
  [SingleType ::= (*) AtomicType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [UnqualifiedNCName ::= (*) IN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [SingleType ::= (*) AtomicType QUESTIONMARK , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) CAST , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [AtomicType ::= (*) QName , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [UnqualifiedNCName ::= (*) MOD , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [UnqualifiedNCName ::= (*) OF , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) UNION , {COLON }]
  [UnqualifiedNCName ::= (*) SOME , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA QUESTIONMARK EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
}
transition on QName to state [321]
transition on NODE to state [167]
transition on ATTRIBUTE to state [166]
transition on INTERSECT to state [81]
transition on ITEM to state [84]
transition on TEXT to state [165]
transition on FOLLOWING to state [164]
transition on DOCUMENT_NODE to state [163]
transition on PARENT to state [162]
transition on AtomicType to state [363]
transition on THEN to state [39]
transition on INSTANCE to state [36]
transition on SingleType to state [390]
transition on ELEMENT to state [161]
transition on CASTABLE to state [89]
transition on TO to state [122]
transition on EVERY to state [126]
transition on ELSE to state [74]
transition on UNION to state [64]
transition on ANCESTOR to state [160]
transition on ANCESTOR_OR_SELF to state [159]
transition on PRECEDING to state [158]
transition on TREAT to state [14]
transition on MOD to state [53]
transition on NCNAME to state [83]
transition on SELF to state [157]
transition on UnqualifiedLocalPart to state [102]
transition on RETURN to state [73]
transition on SATISFIES to state [118]
transition on OF to state [106]
transition on DESCENDANT to state [156]
transition on IF to state [129]
transition on DESCENDANT_OR_SELF to state [155]
transition on TYPESWITCH to state [104]
transition on DIV to state [71]
transition on FOLLOWING_SIBLING to state [154]
transition on IDIV to state [61]
transition on OR to state [96]
transition on IN to state [95]
transition on UnqualifiedNCName to state [72]
transition on SCHEMA_ELEMENT to state [153]
transition on AND to state [120]
transition on IS to state [88]
transition on PROCESSING_INSTRUCTION to state [152]
transition on CHILD to state [151]
transition on FOR to state [128]
transition on Prefix to state [93]
transition on SCHEMA_ATTRIBUTE to state [149]
transition on COMMENT to state [148]
transition on NAMESPACE to state [147]
transition on EMPTY to state [52]
transition on NCName to state [31]
transition on SOME to state [130]
transition on PRECEDING_SIBLING to state [146]
transition on EXCEPT to state [56]
transition on CAST to state [105]

-------------------
lalr_state [390]: {
  [CastExpr ::= UnaryExpr CAST AS SingleType (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [391]: {
  [$START ::= XPath EOF (*) , {EOF }]
}

-------------------
lalr_state [392]: {
  [ReverseAxis ::= PARENT COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [393]: {
  [ReverseStep ::= ReverseAxis NodeTest (*) , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}

-------------------
lalr_state [394]: {
  [ForwardAxis ::= FOLLOWING COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
lalr_state [395]: {
  [UnqualifiedNCName ::= (*) UNION , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EVERY , {COLON }]
  [QName ::= (*) UnqualifiedLocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) TextTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ContextItemExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ReverseStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr TREAT AS SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DOCUMENT_NODE , {COLON }]
  [NCName ::= (*) ATTRIBUTE , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR NCName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR Expr RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) FOLLOWING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TYPESWITCH , {COLON }]
  [NCName ::= (*) PRECEDING , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) PRECEDING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr PLUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CAST , {COLON }]
  [KindTest ::= (*) DocumentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FilterExpr ::= (*) PrimaryExpr PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr PIPE IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EXCEPT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) THEN , {COLON }]
  [Prefix ::= (*) NCName , {COLON }]
  [AnyKindTest ::= (*) NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) NumericLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) AbbrevForwardStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr CASTABLE AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) RETURN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EMPTY , {COLON }]
  [NCName ::= (*) DESCENDANT_OR_SELF , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) AT_SYM NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IDIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NCNAME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) UNION , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevReverseStep ::= (*) DOTDOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PARENT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) FOR , {COLON }]
  [IntegerLiteral ::= (*) INTEGER , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr INTERSECT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) OF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) AND , {COLON }]
  [UnqualifiedLocalPart ::= (*) UnqualifiedNCName , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR ElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) IntegerLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr CAST AS SingleType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SOME , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) NODE , {COLON }]
  [NCName ::= (*) FOLLOWING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard COMMA TypeName RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseStep ::= (*) ReverseAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr GeneralComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CHILD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) EXCEPT , {COLON }]
  [NodeTest ::= (*) NameTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr DIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) RETURN , {COLON }]
  [DoubleLiteral ::= (*) DOUBLE , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaAttributeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) Literal , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) AxisStep , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CASTABLE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) DIV , {COLON }]
  [NCName ::= (*) TO , {COLON }]
  [TextTest ::= (*) TEXT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DoubleLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) MINUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) THEN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ATTRIBUTE , {COLON }]
  [NCName ::= (*) PARENT , {COLON }]
  [ReverseAxis ::= (*) PARENT COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OF , {COLON }]
  [SchemaElementTest ::= (*) SCHEMA_ELEMENT LPAR ElementDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NameTest ::= (*) Wildcard , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr MOD UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SOME , {COLON }]
  [KindTest ::= (*) CommentTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) ParenthesizedExpr , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AxisStep ::= (*) ForwardStep PredicateList , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [TreatExpr ::= (*) CastableExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IS , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) COMMENT , {COLON }]
  [NCName ::= (*) DESCENDANT , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ParenthesizedExpr ::= (*) LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [OrExpr ::= OrExpr OR (*) AndExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [ForwardAxis ::= (*) FOLLOWING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [ValueExpr ::= (*) PathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) AND , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TEXT , {COLON }]
  [NCName ::= (*) PRECEDING_SIBLING , {COLON }]
  [ReverseAxis ::= (*) PRECEDING_SIBLING COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) FOLLOWING_SIBLING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) CASTABLE , {COLON }]
  [Wildcard ::= (*) STAR COLON NCName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASHSLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) UnionExpr UNION IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INTERSECT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IF , {COLON }]
  [QName ::= (*) Prefix COLON LocalPart , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) AnyKindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) FunctionCall , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardStep ::= (*) ForwardAxis NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [CastableExpr ::= (*) CastExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) IN , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELEMENT , {COLON }]
  [NCName ::= (*) SELF , {COLON }]
  [PITest ::= (*) PROCESSING_INSTRUCTION LPAR StringLiteral RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ContextItemExpr ::= (*) DOT , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) NAMESPACE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AndExpr ::= (*) AndExpr AND ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DIV , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) MOD , {COLON }]
  [NCName ::= (*) ANCESTOR_OR_SELF , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [AdditiveExpr ::= (*) AdditiveExpr MINUS MultiplicativeExpr , {EOF RBRACKET RPAR PLUS MINUS EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) NAMESPACE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IS , {COLON }]
  [KindTest ::= (*) ElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) INSTANCE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ELSE , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [Literal ::= (*) StringLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) CHILD COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [CastExpr ::= (*) UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) SATISFIES , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) ITEM , {COLON }]
  [NCName ::= (*) FOLLOWING_SIBLING , {COLON }]
  [AttributeTest ::= (*) ATTRIBUTE LPAR AttribNameOrWildcard RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [FunctionCall ::= (*) QName LPAR FunctionCallMiddle RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [AbbrevForwardStep ::= (*) NodeTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr ValueComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) MOD , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TO , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INTERSECT , {COLON }]
  [ElementTest ::= (*) ELEMENT LPAR ElementNameOrWildcard COMMA TypeName QUESTIONMARK RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NodeTest ::= (*) KindTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr STAR UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ANCESTOR , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IN , {COLON }]
  [DecimalLiteral ::= (*) DECIMAL , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) SchemaElementTest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= (*) RelativePathExpr FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [IntersectExceptExpr ::= (*) IntersectExceptExpr EXCEPT InstanceofExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) TREAT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) OR , {COLON }]
  [NCName ::= (*) NCNAME , {COLON }]
  [DocumentTest ::= (*) DOCUMENT_NODE LPAR SchemaElementTest RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NumericLiteral ::= (*) DecimalLiteral , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) ATTRIBUTE COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) ValueExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) EVERY , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) PROCESSING_INSTRUCTION , {COLON }]
  [NCName ::= (*) NAMESPACE , {COLON }]
  [ReverseStep ::= (*) AbbrevReverseStep , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ComparisonExpr ::= (*) RangeExpr NodeComp RangeExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) INSTANCE , {COLON }]
  [NameTest ::= (*) QName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [MultiplicativeExpr ::= (*) MultiplicativeExpr IDIV UnionExpr , {EOF RBRACKET RPAR PLUS MINUS STAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) PRECEDING , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SATISFIES , {COLON }]
  [StringLiteral ::= (*) STRING , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [KindTest ::= (*) PITest , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PrimaryExpr ::= (*) VarRef , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [StepExpr ::= (*) FilterExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [InstanceofExpr ::= (*) TreatExpr INSTANCE OF SequenceType , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) CAST , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) IDIV , {COLON }]
  [NCName ::= (*) CHILD , {COLON }]
  [CommentTest ::= (*) COMMENT LPAR RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [VarRef ::= (*) DOLLAR VarName , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ForwardAxis ::= (*) DESCENDANT_OR_SELF COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [UnaryExpr ::= (*) PLUS UnaryExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnqualifiedNCName ::= (*) ELSE , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) SCHEMA_ELEMENT , {COLON }]
  [NCName ::= (*) ANCESTOR , {COLON }]
  [SchemaAttributeTest ::= (*) SCHEMA_ATTRIBUTE LPAR AttributeDeclaration RPAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [ReverseAxis ::= (*) ANCESTOR COLONCOLON , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
  [RangeExpr ::= (*) AdditiveExpr TO AdditiveExpr , {EOF RBRACKET RPAR EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE IS RETURN SATISFIES ELSE AND OR }]
  [UnqualifiedNCName ::= (*) DESCENDANT_OR_SELF , {EOF LBRACKET RBRACKET LPAR RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [NCName ::= (*) TREAT , {COLON }]
  [Wildcard ::= (*) STAR , {EOF LBRACKET RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= (*) FORWARD_SLASH RelativePathExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [UnionExpr ::= (*) IntersectExceptExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on StepExpr to state [124]
transition on AndExpr to state [396]
transition on TO to state [122]
transition on StringLiteral to state [121]
transition on AND to state [120]
transition on IntersectExceptExpr to state [119]
transition on SATISFIES to state [118]
transition on NodeTest to state [117]
transition on STRING to state [116]
transition on NumericLiteral to state [115]
transition on IntegerLiteral to state [114]
transition on AbbrevForwardStep to state [113]
transition on AnyKindTest to state [112]
transition on PrimaryExpr to state [111]
transition on NameTest to state [110]
transition on SOME to state [130]
transition on DESCENDANT to state [107]
transition on OF to state [106]
transition on CAST to state [105]
transition on TYPESWITCH to state [104]
transition on TextTest to state [103]
transition on UnqualifiedLocalPart to state [102]
transition on PathExpr to state [101]
transition on IF to state [129]
transition on ValueExpr to state [99]
transition on ATTRIBUTE to state [98]
transition on Literal to state [97]
transition on OR to state [96]
transition on IN to state [95]
transition on PROCESSING_INSTRUCTION to state [94]
transition on Prefix to state [93]
transition on AbbrevReverseStep to state [92]
transition on ParenthesizedExpr to state [91]
transition on MINUS to state [90]
transition on CASTABLE to state [89]
transition on IS to state [88]
transition on SchemaAttributeTest to state [87]
transition on RelativePathExpr to state [86]
transition on MultiplicativeExpr to state [85]
transition on ITEM to state [84]
transition on NCNAME to state [83]
transition on COMMENT to state [82]
transition on INTERSECT to state [81]
transition on AttributeTest to state [80]
transition on SchemaElementTest to state [79]
transition on DOT to state [78]
transition on DOTDOT to state [77]
transition on VarRef to state [75]
transition on ELSE to state [74]
transition on RETURN to state [73]
transition on UnqualifiedNCName to state [72]
transition on DIV to state [71]
transition on PRECEDING_SIBLING to state [70]
transition on STAR to state [69]
transition on FOR to state [128]
transition on ElementTest to state [67]
transition on DECIMAL to state [66]
transition on QName to state [65]
transition on UNION to state [64]
transition on LPAR to state [63]
transition on ForwardStep to state [62]
transition on IDIV to state [61]
transition on PLUS to state [60]
transition on PITest to state [58]
transition on FilterExpr to state [57]
transition on EXCEPT to state [56]
transition on DOLLAR to state [55]
transition on AT_SYM to state [54]
transition on MOD to state [53]
transition on EMPTY to state [52]
transition on PRECEDING to state [51]
transition on Wildcard to state [49]
transition on RangeExpr to state [48]
transition on ComparisonExpr to state [47]
transition on ANCESTOR_OR_SELF to state [46]
transition on KindTest to state [45]
transition on CastableExpr to state [44]
transition on SCHEMA_ATTRIBUTE to state [43]
transition on SCHEMA_ELEMENT to state [42]
transition on ReverseStep to state [41]
transition on ContextItemExpr to state [40]
transition on THEN to state [39]
transition on ELEMENT to state [38]
transition on TEXT to state [37]
transition on INSTANCE to state [36]
transition on SELF to state [35]
transition on EVERY to state [126]
transition on UnionExpr to state [33]
transition on InstanceofExpr to state [32]
transition on NCName to state [31]
transition on FOLLOWING_SIBLING to state [30]
transition on CHILD to state [29]
transition on DOUBLE to state [26]
transition on INTEGER to state [25]
transition on CastExpr to state [24]
transition on ForwardAxis to state [23]
transition on ANCESTOR to state [22]
transition on AxisStep to state [21]
transition on AdditiveExpr to state [20]
transition on CommentTest to state [19]
transition on DocumentTest to state [18]
transition on NODE to state [17]
transition on FORWARD_SLASH to state [16]
transition on FunctionCall to state [15]
transition on TREAT to state [14]
transition on DoubleLiteral to state [13]
transition on NAMESPACE to state [12]
transition on DOCUMENT_NODE to state [11]
transition on TreatExpr to state [10]
transition on UnaryExpr to state [9]
transition on PARENT to state [7]
transition on ReverseAxis to state [6]
transition on FOLLOWING to state [5]
transition on FORWARD_SLASHSLASH to state [3]
transition on DecimalLiteral to state [2]
transition on DESCENDANT_OR_SELF to state [1]

-------------------
lalr_state [396]: {
  [OrExpr ::= OrExpr OR AndExpr (*) , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE OR }]
  [AndExpr ::= AndExpr (*) AND ComparisonExpr , {EOF RBRACKET RPAR COMMA RETURN SATISFIES ELSE AND OR }]
}
transition on AND to state [125]

-------------------
lalr_state [397]: {
  [RelativePathExpr ::= RelativePathExpr (*) FORWARD_SLASHSLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [PathExpr ::= FORWARD_SLASHSLASH RelativePathExpr (*) , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
  [RelativePathExpr ::= RelativePathExpr (*) FORWARD_SLASH StepExpr , {EOF RBRACKET RPAR PLUS MINUS STAR PIPE EQUALS NOTEQUALS LESSTHAN LESSEQUAL GREATER GREATEREQUAL LESS_LESS GREATER_GREATER FORWARD_SLASH FORWARD_SLASHSLASH COMMA EQ NE LT LE GT GE DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE TREAT CASTABLE CAST IS RETURN SATISFIES TO ELSE AND OR }]
}
transition on FORWARD_SLASHSLASH to state [250]
transition on FORWARD_SLASH to state [249]

-------------------
lalr_state [398]: {
  [ForwardAxis ::= DESCENDANT_OR_SELF COLONCOLON (*) , {STAR CHILD DESCENDANT ATTRIBUTE SELF DESCENDANT_OR_SELF FOLLOWING_SIBLING FOLLOWING NAMESPACE PARENT ANCESTOR PRECEDING_SIBLING PRECEDING ANCESTOR_OR_SELF DIV IDIV MOD UNION INTERSECT EXCEPT INSTANCE OF TREAT CASTABLE CAST IS FOR IN RETURN SATISFIES TO SOME EVERY IF THEN ELSE AND OR EMPTY ITEM NODE DOCUMENT_NODE TEXT COMMENT PROCESSING_INSTRUCTION SCHEMA_ATTRIBUTE ELEMENT SCHEMA_ELEMENT TYPESWITCH NCNAME }]
}

-------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 0 warnings
  88 terminals, 83 non-terminals, and 269 productions declared, 
  producing 399 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "XPathCup.java", and "XpathSym.java".
---------------------------------------------------- (v0.10k)
